/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-10")
public class FileRequest implements org.apache.thrift.TBase<FileRequest, FileRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FileRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileRequest");

  private static final org.apache.thrift.protocol.TField REQUEST_ROM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestRom", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSystem", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("byteOffset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CHUNK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("fileIndex", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileRequestTupleSchemeFactory());
  }

  public String requestRom; // required
  public String requestSystem; // required
  public long byteOffset; // required
  public int chunkSize; // required
  public int fileIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ROM((short)1, "requestRom"),
    REQUEST_SYSTEM((short)2, "requestSystem"),
    BYTE_OFFSET((short)3, "byteOffset"),
    CHUNK_SIZE((short)4, "chunkSize"),
    FILE_INDEX((short)5, "fileIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ROM
          return REQUEST_ROM;
        case 2: // REQUEST_SYSTEM
          return REQUEST_SYSTEM;
        case 3: // BYTE_OFFSET
          return BYTE_OFFSET;
        case 4: // CHUNK_SIZE
          return CHUNK_SIZE;
        case 5: // FILE_INDEX
          return FILE_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BYTEOFFSET_ISSET_ID = 0;
  private static final int __CHUNKSIZE_ISSET_ID = 1;
  private static final int __FILEINDEX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ROM, new org.apache.thrift.meta_data.FieldMetaData("requestRom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("requestSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYTE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("byteOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHUNK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("chunkSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("fileIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileRequest.class, metaDataMap);
  }

  public FileRequest() {
    this.byteOffset = 0L;

    this.chunkSize = 16384;

    this.fileIndex = 0;

  }

  public FileRequest(
    String requestRom,
    String requestSystem,
    long byteOffset,
    int chunkSize,
    int fileIndex)
  {
    this();
    this.requestRom = requestRom;
    this.requestSystem = requestSystem;
    this.byteOffset = byteOffset;
    setByteOffsetIsSet(true);
    this.chunkSize = chunkSize;
    setChunkSizeIsSet(true);
    this.fileIndex = fileIndex;
    setFileIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileRequest(FileRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequestRom()) {
      this.requestRom = other.requestRom;
    }
    if (other.isSetRequestSystem()) {
      this.requestSystem = other.requestSystem;
    }
    this.byteOffset = other.byteOffset;
    this.chunkSize = other.chunkSize;
    this.fileIndex = other.fileIndex;
  }

  public FileRequest deepCopy() {
    return new FileRequest(this);
  }

  @Override
  public void clear() {
    this.requestRom = null;
    this.requestSystem = null;
    this.byteOffset = 0L;

    this.chunkSize = 16384;

    this.fileIndex = 0;

  }

  public String getRequestRom() {
    return this.requestRom;
  }

  public FileRequest setRequestRom(String requestRom) {
    this.requestRom = requestRom;
    return this;
  }

  public void unsetRequestRom() {
    this.requestRom = null;
  }

  /** Returns true if field requestRom is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestRom() {
    return this.requestRom != null;
  }

  public void setRequestRomIsSet(boolean value) {
    if (!value) {
      this.requestRom = null;
    }
  }

  public String getRequestSystem() {
    return this.requestSystem;
  }

  public FileRequest setRequestSystem(String requestSystem) {
    this.requestSystem = requestSystem;
    return this;
  }

  public void unsetRequestSystem() {
    this.requestSystem = null;
  }

  /** Returns true if field requestSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSystem() {
    return this.requestSystem != null;
  }

  public void setRequestSystemIsSet(boolean value) {
    if (!value) {
      this.requestSystem = null;
    }
  }

  public long getByteOffset() {
    return this.byteOffset;
  }

  public FileRequest setByteOffset(long byteOffset) {
    this.byteOffset = byteOffset;
    setByteOffsetIsSet(true);
    return this;
  }

  public void unsetByteOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEOFFSET_ISSET_ID);
  }

  /** Returns true if field byteOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetByteOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEOFFSET_ISSET_ID);
  }

  public void setByteOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEOFFSET_ISSET_ID, value);
  }

  public int getChunkSize() {
    return this.chunkSize;
  }

  public FileRequest setChunkSize(int chunkSize) {
    this.chunkSize = chunkSize;
    setChunkSizeIsSet(true);
    return this;
  }

  public void unsetChunkSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKSIZE_ISSET_ID);
  }

  /** Returns true if field chunkSize is set (has been assigned a value) and false otherwise */
  public boolean isSetChunkSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CHUNKSIZE_ISSET_ID);
  }

  public void setChunkSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKSIZE_ISSET_ID, value);
  }

  public int getFileIndex() {
    return this.fileIndex;
  }

  public FileRequest setFileIndex(int fileIndex) {
    this.fileIndex = fileIndex;
    setFileIndexIsSet(true);
    return this;
  }

  public void unsetFileIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEINDEX_ISSET_ID);
  }

  /** Returns true if field fileIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetFileIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEINDEX_ISSET_ID);
  }

  public void setFileIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_ROM:
      if (value == null) {
        unsetRequestRom();
      } else {
        setRequestRom((String)value);
      }
      break;

    case REQUEST_SYSTEM:
      if (value == null) {
        unsetRequestSystem();
      } else {
        setRequestSystem((String)value);
      }
      break;

    case BYTE_OFFSET:
      if (value == null) {
        unsetByteOffset();
      } else {
        setByteOffset((Long)value);
      }
      break;

    case CHUNK_SIZE:
      if (value == null) {
        unsetChunkSize();
      } else {
        setChunkSize((Integer)value);
      }
      break;

    case FILE_INDEX:
      if (value == null) {
        unsetFileIndex();
      } else {
        setFileIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ROM:
      return getRequestRom();

    case REQUEST_SYSTEM:
      return getRequestSystem();

    case BYTE_OFFSET:
      return Long.valueOf(getByteOffset());

    case CHUNK_SIZE:
      return Integer.valueOf(getChunkSize());

    case FILE_INDEX:
      return Integer.valueOf(getFileIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ROM:
      return isSetRequestRom();
    case REQUEST_SYSTEM:
      return isSetRequestSystem();
    case BYTE_OFFSET:
      return isSetByteOffset();
    case CHUNK_SIZE:
      return isSetChunkSize();
    case FILE_INDEX:
      return isSetFileIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileRequest)
      return this.equals((FileRequest)that);
    return false;
  }

  public boolean equals(FileRequest that) {
    if (that == null)
      return false;

    boolean this_present_requestRom = true && this.isSetRequestRom();
    boolean that_present_requestRom = true && that.isSetRequestRom();
    if (this_present_requestRom || that_present_requestRom) {
      if (!(this_present_requestRom && that_present_requestRom))
        return false;
      if (!this.requestRom.equals(that.requestRom))
        return false;
    }

    boolean this_present_requestSystem = true && this.isSetRequestSystem();
    boolean that_present_requestSystem = true && that.isSetRequestSystem();
    if (this_present_requestSystem || that_present_requestSystem) {
      if (!(this_present_requestSystem && that_present_requestSystem))
        return false;
      if (!this.requestSystem.equals(that.requestSystem))
        return false;
    }

    boolean this_present_byteOffset = true;
    boolean that_present_byteOffset = true;
    if (this_present_byteOffset || that_present_byteOffset) {
      if (!(this_present_byteOffset && that_present_byteOffset))
        return false;
      if (this.byteOffset != that.byteOffset)
        return false;
    }

    boolean this_present_chunkSize = true;
    boolean that_present_chunkSize = true;
    if (this_present_chunkSize || that_present_chunkSize) {
      if (!(this_present_chunkSize && that_present_chunkSize))
        return false;
      if (this.chunkSize != that.chunkSize)
        return false;
    }

    boolean this_present_fileIndex = true;
    boolean that_present_fileIndex = true;
    if (this_present_fileIndex || that_present_fileIndex) {
      if (!(this_present_fileIndex && that_present_fileIndex))
        return false;
      if (this.fileIndex != that.fileIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FileRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestRom()).compareTo(other.isSetRequestRom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestRom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestRom, other.requestRom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSystem()).compareTo(other.isSetRequestSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSystem, other.requestSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteOffset()).compareTo(other.isSetByteOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteOffset, other.byteOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkSize()).compareTo(other.isSetChunkSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkSize, other.chunkSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileIndex()).compareTo(other.isSetFileIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileIndex, other.fileIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileRequest(");
    boolean first = true;

    sb.append("requestRom:");
    if (this.requestRom == null) {
      sb.append("null");
    } else {
      sb.append(this.requestRom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSystem:");
    if (this.requestSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.requestSystem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteOffset:");
    sb.append(this.byteOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkSize:");
    sb.append(this.chunkSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileIndex:");
    sb.append(this.fileIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileRequestStandardSchemeFactory implements SchemeFactory {
    public FileRequestStandardScheme getScheme() {
      return new FileRequestStandardScheme();
    }
  }

  private static class FileRequestStandardScheme extends StandardScheme<FileRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestRom = iprot.readString();
              struct.setRequestRomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestSystem = iprot.readString();
              struct.setRequestSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.byteOffset = iprot.readI64();
              struct.setByteOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHUNK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chunkSize = iprot.readI32();
              struct.setChunkSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileIndex = iprot.readI32();
              struct.setFileIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestRom != null) {
        oprot.writeFieldBegin(REQUEST_ROM_FIELD_DESC);
        oprot.writeString(struct.requestRom);
        oprot.writeFieldEnd();
      }
      if (struct.requestSystem != null) {
        oprot.writeFieldBegin(REQUEST_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.requestSystem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BYTE_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.byteOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.chunkSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.fileIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileRequestTupleSchemeFactory implements SchemeFactory {
    public FileRequestTupleScheme getScheme() {
      return new FileRequestTupleScheme();
    }
  }

  private static class FileRequestTupleScheme extends TupleScheme<FileRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRequestRom()) {
        optionals.set(0);
      }
      if (struct.isSetRequestSystem()) {
        optionals.set(1);
      }
      if (struct.isSetByteOffset()) {
        optionals.set(2);
      }
      if (struct.isSetChunkSize()) {
        optionals.set(3);
      }
      if (struct.isSetFileIndex()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRequestRom()) {
        oprot.writeString(struct.requestRom);
      }
      if (struct.isSetRequestSystem()) {
        oprot.writeString(struct.requestSystem);
      }
      if (struct.isSetByteOffset()) {
        oprot.writeI64(struct.byteOffset);
      }
      if (struct.isSetChunkSize()) {
        oprot.writeI32(struct.chunkSize);
      }
      if (struct.isSetFileIndex()) {
        oprot.writeI32(struct.fileIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.requestRom = iprot.readString();
        struct.setRequestRomIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestSystem = iprot.readString();
        struct.setRequestSystemIsSet(true);
      }
      if (incoming.get(2)) {
        struct.byteOffset = iprot.readI64();
        struct.setByteOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chunkSize = iprot.readI32();
        struct.setChunkSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileIndex = iprot.readI32();
        struct.setFileIndexIsSet(true);
      }
    }
  }

}

