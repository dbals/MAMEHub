/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-9")
public class PlayerInternalPassword implements org.apache.thrift.TBase<PlayerInternalPassword, PlayerInternalPassword._Fields>, java.io.Serializable, Cloneable, Comparable<PlayerInternalPassword> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerInternalPassword");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FACBEOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("facbeookId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GOOGLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("googleId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerInternalPasswordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerInternalPasswordTupleSchemeFactory());
  }

  public String id; // required
  public String password; // required
  public String emailAddress; // required
  public String facbeookId; // required
  public String googleId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PASSWORD((short)2, "password"),
    EMAIL_ADDRESS((short)3, "emailAddress"),
    FACBEOOK_ID((short)4, "facbeookId"),
    GOOGLE_ID((short)5, "googleId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PASSWORD
          return PASSWORD;
        case 3: // EMAIL_ADDRESS
          return EMAIL_ADDRESS;
        case 4: // FACBEOOK_ID
          return FACBEOOK_ID;
        case 5: // GOOGLE_ID
          return GOOGLE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("emailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACBEOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("facbeookId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOOGLE_ID, new org.apache.thrift.meta_data.FieldMetaData("googleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerInternalPassword.class, metaDataMap);
  }

  public PlayerInternalPassword() {
    this.emailAddress = "";

  }

  public PlayerInternalPassword(
    String id,
    String password,
    String emailAddress,
    String facbeookId,
    String googleId)
  {
    this();
    this.id = id;
    this.password = password;
    this.emailAddress = emailAddress;
    this.facbeookId = facbeookId;
    this.googleId = googleId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerInternalPassword(PlayerInternalPassword other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetEmailAddress()) {
      this.emailAddress = other.emailAddress;
    }
    if (other.isSetFacbeookId()) {
      this.facbeookId = other.facbeookId;
    }
    if (other.isSetGoogleId()) {
      this.googleId = other.googleId;
    }
  }

  public PlayerInternalPassword deepCopy() {
    return new PlayerInternalPassword(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.password = null;
    this.emailAddress = "";

    this.facbeookId = null;
    this.googleId = null;
  }

  public String getId() {
    return this.id;
  }

  public PlayerInternalPassword setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public PlayerInternalPassword setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getEmailAddress() {
    return this.emailAddress;
  }

  public PlayerInternalPassword setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  public void unsetEmailAddress() {
    this.emailAddress = null;
  }

  /** Returns true if field emailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAddress() {
    return this.emailAddress != null;
  }

  public void setEmailAddressIsSet(boolean value) {
    if (!value) {
      this.emailAddress = null;
    }
  }

  public String getFacbeookId() {
    return this.facbeookId;
  }

  public PlayerInternalPassword setFacbeookId(String facbeookId) {
    this.facbeookId = facbeookId;
    return this;
  }

  public void unsetFacbeookId() {
    this.facbeookId = null;
  }

  /** Returns true if field facbeookId is set (has been assigned a value) and false otherwise */
  public boolean isSetFacbeookId() {
    return this.facbeookId != null;
  }

  public void setFacbeookIdIsSet(boolean value) {
    if (!value) {
      this.facbeookId = null;
    }
  }

  public String getGoogleId() {
    return this.googleId;
  }

  public PlayerInternalPassword setGoogleId(String googleId) {
    this.googleId = googleId;
    return this;
  }

  public void unsetGoogleId() {
    this.googleId = null;
  }

  /** Returns true if field googleId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoogleId() {
    return this.googleId != null;
  }

  public void setGoogleIdIsSet(boolean value) {
    if (!value) {
      this.googleId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case EMAIL_ADDRESS:
      if (value == null) {
        unsetEmailAddress();
      } else {
        setEmailAddress((String)value);
      }
      break;

    case FACBEOOK_ID:
      if (value == null) {
        unsetFacbeookId();
      } else {
        setFacbeookId((String)value);
      }
      break;

    case GOOGLE_ID:
      if (value == null) {
        unsetGoogleId();
      } else {
        setGoogleId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PASSWORD:
      return getPassword();

    case EMAIL_ADDRESS:
      return getEmailAddress();

    case FACBEOOK_ID:
      return getFacbeookId();

    case GOOGLE_ID:
      return getGoogleId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PASSWORD:
      return isSetPassword();
    case EMAIL_ADDRESS:
      return isSetEmailAddress();
    case FACBEOOK_ID:
      return isSetFacbeookId();
    case GOOGLE_ID:
      return isSetGoogleId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayerInternalPassword)
      return this.equals((PlayerInternalPassword)that);
    return false;
  }

  public boolean equals(PlayerInternalPassword that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_emailAddress = true && this.isSetEmailAddress();
    boolean that_present_emailAddress = true && that.isSetEmailAddress();
    if (this_present_emailAddress || that_present_emailAddress) {
      if (!(this_present_emailAddress && that_present_emailAddress))
        return false;
      if (!this.emailAddress.equals(that.emailAddress))
        return false;
    }

    boolean this_present_facbeookId = true && this.isSetFacbeookId();
    boolean that_present_facbeookId = true && that.isSetFacbeookId();
    if (this_present_facbeookId || that_present_facbeookId) {
      if (!(this_present_facbeookId && that_present_facbeookId))
        return false;
      if (!this.facbeookId.equals(that.facbeookId))
        return false;
    }

    boolean this_present_googleId = true && this.isSetGoogleId();
    boolean that_present_googleId = true && that.isSetGoogleId();
    if (this_present_googleId || that_present_googleId) {
      if (!(this_present_googleId && that_present_googleId))
        return false;
      if (!this.googleId.equals(that.googleId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlayerInternalPassword other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAddress()).compareTo(other.isSetEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAddress, other.emailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacbeookId()).compareTo(other.isSetFacbeookId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacbeookId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facbeookId, other.facbeookId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoogleId()).compareTo(other.isSetGoogleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoogleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.googleId, other.googleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayerInternalPassword(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailAddress:");
    if (this.emailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.emailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("facbeookId:");
    if (this.facbeookId == null) {
      sb.append("null");
    } else {
      sb.append(this.facbeookId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("googleId:");
    if (this.googleId == null) {
      sb.append("null");
    } else {
      sb.append(this.googleId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerInternalPasswordStandardSchemeFactory implements SchemeFactory {
    public PlayerInternalPasswordStandardScheme getScheme() {
      return new PlayerInternalPasswordStandardScheme();
    }
  }

  private static class PlayerInternalPasswordStandardScheme extends StandardScheme<PlayerInternalPassword> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerInternalPassword struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailAddress = iprot.readString();
              struct.setEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACBEOOK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.facbeookId = iprot.readString();
              struct.setFacbeookIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GOOGLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.googleId = iprot.readString();
              struct.setGoogleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerInternalPassword struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.emailAddress != null) {
        oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.emailAddress);
        oprot.writeFieldEnd();
      }
      if (struct.facbeookId != null) {
        oprot.writeFieldBegin(FACBEOOK_ID_FIELD_DESC);
        oprot.writeString(struct.facbeookId);
        oprot.writeFieldEnd();
      }
      if (struct.googleId != null) {
        oprot.writeFieldBegin(GOOGLE_ID_FIELD_DESC);
        oprot.writeString(struct.googleId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerInternalPasswordTupleSchemeFactory implements SchemeFactory {
    public PlayerInternalPasswordTupleScheme getScheme() {
      return new PlayerInternalPasswordTupleScheme();
    }
  }

  private static class PlayerInternalPasswordTupleScheme extends TupleScheme<PlayerInternalPassword> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerInternalPassword struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPassword()) {
        optionals.set(1);
      }
      if (struct.isSetEmailAddress()) {
        optionals.set(2);
      }
      if (struct.isSetFacbeookId()) {
        optionals.set(3);
      }
      if (struct.isSetGoogleId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetEmailAddress()) {
        oprot.writeString(struct.emailAddress);
      }
      if (struct.isSetFacbeookId()) {
        oprot.writeString(struct.facbeookId);
      }
      if (struct.isSetGoogleId()) {
        oprot.writeString(struct.googleId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerInternalPassword struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.emailAddress = iprot.readString();
        struct.setEmailAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.facbeookId = iprot.readString();
        struct.setFacbeookIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.googleId = iprot.readString();
        struct.setGoogleIdIsSet(true);
      }
    }
  }

}

