/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-10")
public class Player implements org.apache.thrift.TBase<Player, Player._Fields>, java.io.Serializable, Cloneable, Comparable<Player> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Player");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOGGED_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("loggedIn", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField MODERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("moderator", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IN_GAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inGame", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PORTS_OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("portsOpen", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField BASE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("basePort", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SECONDARY_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaryPort", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String ipAddress; // required
  public boolean loggedIn; // required
  public boolean moderator; // required
  public String inGame; // required
  public boolean portsOpen; // required
  public PlayerStatus status; // required
  public int basePort; // required
  public int secondaryPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    IP_ADDRESS((short)3, "ipAddress"),
    LOGGED_IN((short)5, "loggedIn"),
    MODERATOR((short)6, "moderator"),
    IN_GAME((short)7, "inGame"),
    PORTS_OPEN((short)8, "portsOpen"),
    STATUS((short)11, "status"),
    BASE_PORT((short)12, "basePort"),
    SECONDARY_PORT((short)13, "secondaryPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // IP_ADDRESS
          return IP_ADDRESS;
        case 5: // LOGGED_IN
          return LOGGED_IN;
        case 6: // MODERATOR
          return MODERATOR;
        case 7: // IN_GAME
          return IN_GAME;
        case 8: // PORTS_OPEN
          return PORTS_OPEN;
        case 11: // STATUS
          return STATUS;
        case 12: // BASE_PORT
          return BASE_PORT;
        case 13: // SECONDARY_PORT
          return SECONDARY_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOGGEDIN_ISSET_ID = 0;
  private static final int __MODERATOR_ISSET_ID = 1;
  private static final int __PORTSOPEN_ISSET_ID = 2;
  private static final int __BASEPORT_ISSET_ID = 3;
  private static final int __SECONDARYPORT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGGED_IN, new org.apache.thrift.meta_data.FieldMetaData("loggedIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MODERATOR, new org.apache.thrift.meta_data.FieldMetaData("moderator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_GAME, new org.apache.thrift.meta_data.FieldMetaData("inGame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORTS_OPEN, new org.apache.thrift.meta_data.FieldMetaData("portsOpen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerStatus.class)));
    tmpMap.put(_Fields.BASE_PORT, new org.apache.thrift.meta_data.FieldMetaData("basePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECONDARY_PORT, new org.apache.thrift.meta_data.FieldMetaData("secondaryPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Player.class, metaDataMap);
  }

  public Player() {
    this.loggedIn = true;

    this.moderator = false;

    this.inGame = "";

    this.portsOpen = false;

    this.basePort = 6805;

    this.secondaryPort = 6806;

  }

  public Player(
    String id,
    String name,
    String ipAddress,
    boolean loggedIn,
    boolean moderator,
    String inGame,
    boolean portsOpen,
    PlayerStatus status,
    int basePort,
    int secondaryPort)
  {
    this();
    this.id = id;
    this.name = name;
    this.ipAddress = ipAddress;
    this.loggedIn = loggedIn;
    setLoggedInIsSet(true);
    this.moderator = moderator;
    setModeratorIsSet(true);
    this.inGame = inGame;
    this.portsOpen = portsOpen;
    setPortsOpenIsSet(true);
    this.status = status;
    this.basePort = basePort;
    setBasePortIsSet(true);
    this.secondaryPort = secondaryPort;
    setSecondaryPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Player(Player other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
    this.loggedIn = other.loggedIn;
    this.moderator = other.moderator;
    if (other.isSetInGame()) {
      this.inGame = other.inGame;
    }
    this.portsOpen = other.portsOpen;
    if (other.isSetStatus()) {
      this.status = new PlayerStatus(other.status);
    }
    this.basePort = other.basePort;
    this.secondaryPort = other.secondaryPort;
  }

  public Player deepCopy() {
    return new Player(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.ipAddress = null;
    this.loggedIn = true;

    this.moderator = false;

    this.inGame = "";

    this.portsOpen = false;

    this.status = null;
    this.basePort = 6805;

    this.secondaryPort = 6806;

  }

  public String getId() {
    return this.id;
  }

  public Player setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Player setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getIpAddress() {
    return this.ipAddress;
  }

  public Player setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public boolean isLoggedIn() {
    return this.loggedIn;
  }

  public Player setLoggedIn(boolean loggedIn) {
    this.loggedIn = loggedIn;
    setLoggedInIsSet(true);
    return this;
  }

  public void unsetLoggedIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGGEDIN_ISSET_ID);
  }

  /** Returns true if field loggedIn is set (has been assigned a value) and false otherwise */
  public boolean isSetLoggedIn() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGGEDIN_ISSET_ID);
  }

  public void setLoggedInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGGEDIN_ISSET_ID, value);
  }

  public boolean isModerator() {
    return this.moderator;
  }

  public Player setModerator(boolean moderator) {
    this.moderator = moderator;
    setModeratorIsSet(true);
    return this;
  }

  public void unsetModerator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODERATOR_ISSET_ID);
  }

  /** Returns true if field moderator is set (has been assigned a value) and false otherwise */
  public boolean isSetModerator() {
    return EncodingUtils.testBit(__isset_bitfield, __MODERATOR_ISSET_ID);
  }

  public void setModeratorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODERATOR_ISSET_ID, value);
  }

  public String getInGame() {
    return this.inGame;
  }

  public Player setInGame(String inGame) {
    this.inGame = inGame;
    return this;
  }

  public void unsetInGame() {
    this.inGame = null;
  }

  /** Returns true if field inGame is set (has been assigned a value) and false otherwise */
  public boolean isSetInGame() {
    return this.inGame != null;
  }

  public void setInGameIsSet(boolean value) {
    if (!value) {
      this.inGame = null;
    }
  }

  public boolean isPortsOpen() {
    return this.portsOpen;
  }

  public Player setPortsOpen(boolean portsOpen) {
    this.portsOpen = portsOpen;
    setPortsOpenIsSet(true);
    return this;
  }

  public void unsetPortsOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTSOPEN_ISSET_ID);
  }

  /** Returns true if field portsOpen is set (has been assigned a value) and false otherwise */
  public boolean isSetPortsOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __PORTSOPEN_ISSET_ID);
  }

  public void setPortsOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTSOPEN_ISSET_ID, value);
  }

  public PlayerStatus getStatus() {
    return this.status;
  }

  public Player setStatus(PlayerStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getBasePort() {
    return this.basePort;
  }

  public Player setBasePort(int basePort) {
    this.basePort = basePort;
    setBasePortIsSet(true);
    return this;
  }

  public void unsetBasePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEPORT_ISSET_ID);
  }

  /** Returns true if field basePort is set (has been assigned a value) and false otherwise */
  public boolean isSetBasePort() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEPORT_ISSET_ID);
  }

  public void setBasePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEPORT_ISSET_ID, value);
  }

  public int getSecondaryPort() {
    return this.secondaryPort;
  }

  public Player setSecondaryPort(int secondaryPort) {
    this.secondaryPort = secondaryPort;
    setSecondaryPortIsSet(true);
    return this;
  }

  public void unsetSecondaryPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID);
  }

  /** Returns true if field secondaryPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondaryPort() {
    return EncodingUtils.testBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID);
  }

  public void setSecondaryPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((String)value);
      }
      break;

    case LOGGED_IN:
      if (value == null) {
        unsetLoggedIn();
      } else {
        setLoggedIn((Boolean)value);
      }
      break;

    case MODERATOR:
      if (value == null) {
        unsetModerator();
      } else {
        setModerator((Boolean)value);
      }
      break;

    case IN_GAME:
      if (value == null) {
        unsetInGame();
      } else {
        setInGame((String)value);
      }
      break;

    case PORTS_OPEN:
      if (value == null) {
        unsetPortsOpen();
      } else {
        setPortsOpen((Boolean)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((PlayerStatus)value);
      }
      break;

    case BASE_PORT:
      if (value == null) {
        unsetBasePort();
      } else {
        setBasePort((Integer)value);
      }
      break;

    case SECONDARY_PORT:
      if (value == null) {
        unsetSecondaryPort();
      } else {
        setSecondaryPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case IP_ADDRESS:
      return getIpAddress();

    case LOGGED_IN:
      return Boolean.valueOf(isLoggedIn());

    case MODERATOR:
      return Boolean.valueOf(isModerator());

    case IN_GAME:
      return getInGame();

    case PORTS_OPEN:
      return Boolean.valueOf(isPortsOpen());

    case STATUS:
      return getStatus();

    case BASE_PORT:
      return Integer.valueOf(getBasePort());

    case SECONDARY_PORT:
      return Integer.valueOf(getSecondaryPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case IP_ADDRESS:
      return isSetIpAddress();
    case LOGGED_IN:
      return isSetLoggedIn();
    case MODERATOR:
      return isSetModerator();
    case IN_GAME:
      return isSetInGame();
    case PORTS_OPEN:
      return isSetPortsOpen();
    case STATUS:
      return isSetStatus();
    case BASE_PORT:
      return isSetBasePort();
    case SECONDARY_PORT:
      return isSetSecondaryPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Player)
      return this.equals((Player)that);
    return false;
  }

  public boolean equals(Player that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    boolean this_present_loggedIn = true;
    boolean that_present_loggedIn = true;
    if (this_present_loggedIn || that_present_loggedIn) {
      if (!(this_present_loggedIn && that_present_loggedIn))
        return false;
      if (this.loggedIn != that.loggedIn)
        return false;
    }

    boolean this_present_moderator = true;
    boolean that_present_moderator = true;
    if (this_present_moderator || that_present_moderator) {
      if (!(this_present_moderator && that_present_moderator))
        return false;
      if (this.moderator != that.moderator)
        return false;
    }

    boolean this_present_inGame = true && this.isSetInGame();
    boolean that_present_inGame = true && that.isSetInGame();
    if (this_present_inGame || that_present_inGame) {
      if (!(this_present_inGame && that_present_inGame))
        return false;
      if (!this.inGame.equals(that.inGame))
        return false;
    }

    boolean this_present_portsOpen = true;
    boolean that_present_portsOpen = true;
    if (this_present_portsOpen || that_present_portsOpen) {
      if (!(this_present_portsOpen && that_present_portsOpen))
        return false;
      if (this.portsOpen != that.portsOpen)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_basePort = true;
    boolean that_present_basePort = true;
    if (this_present_basePort || that_present_basePort) {
      if (!(this_present_basePort && that_present_basePort))
        return false;
      if (this.basePort != that.basePort)
        return false;
    }

    boolean this_present_secondaryPort = true;
    boolean that_present_secondaryPort = true;
    if (this_present_secondaryPort || that_present_secondaryPort) {
      if (!(this_present_secondaryPort && that_present_secondaryPort))
        return false;
      if (this.secondaryPort != that.secondaryPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Player other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoggedIn()).compareTo(other.isSetLoggedIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoggedIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loggedIn, other.loggedIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModerator()).compareTo(other.isSetModerator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModerator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moderator, other.moderator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInGame()).compareTo(other.isSetInGame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInGame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inGame, other.inGame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPortsOpen()).compareTo(other.isSetPortsOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortsOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portsOpen, other.portsOpen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBasePort()).compareTo(other.isSetBasePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basePort, other.basePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondaryPort()).compareTo(other.isSetSecondaryPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondaryPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaryPort, other.secondaryPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Player(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loggedIn:");
    sb.append(this.loggedIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moderator:");
    sb.append(this.moderator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inGame:");
    if (this.inGame == null) {
      sb.append("null");
    } else {
      sb.append(this.inGame);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("portsOpen:");
    sb.append(this.portsOpen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("basePort:");
    sb.append(this.basePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondaryPort:");
    sb.append(this.secondaryPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerStandardSchemeFactory implements SchemeFactory {
    public PlayerStandardScheme getScheme() {
      return new PlayerStandardScheme();
    }
  }

  private static class PlayerStandardScheme extends StandardScheme<Player> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Player struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGGED_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.loggedIn = iprot.readBool();
              struct.setLoggedInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MODERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.moderator = iprot.readBool();
              struct.setModeratorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IN_GAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inGame = iprot.readString();
              struct.setInGameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORTS_OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.portsOpen = iprot.readBool();
              struct.setPortsOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new PlayerStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BASE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.basePort = iprot.readI32();
              struct.setBasePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SECONDARY_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secondaryPort = iprot.readI32();
              struct.setSecondaryPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Player struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOGGED_IN_FIELD_DESC);
      oprot.writeBool(struct.loggedIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODERATOR_FIELD_DESC);
      oprot.writeBool(struct.moderator);
      oprot.writeFieldEnd();
      if (struct.inGame != null) {
        oprot.writeFieldBegin(IN_GAME_FIELD_DESC);
        oprot.writeString(struct.inGame);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORTS_OPEN_FIELD_DESC);
      oprot.writeBool(struct.portsOpen);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BASE_PORT_FIELD_DESC);
      oprot.writeI32(struct.basePort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECONDARY_PORT_FIELD_DESC);
      oprot.writeI32(struct.secondaryPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerTupleSchemeFactory implements SchemeFactory {
    public PlayerTupleScheme getScheme() {
      return new PlayerTupleScheme();
    }
  }

  private static class PlayerTupleScheme extends TupleScheme<Player> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Player struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetIpAddress()) {
        optionals.set(2);
      }
      if (struct.isSetLoggedIn()) {
        optionals.set(3);
      }
      if (struct.isSetModerator()) {
        optionals.set(4);
      }
      if (struct.isSetInGame()) {
        optionals.set(5);
      }
      if (struct.isSetPortsOpen()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetBasePort()) {
        optionals.set(8);
      }
      if (struct.isSetSecondaryPort()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIpAddress()) {
        oprot.writeString(struct.ipAddress);
      }
      if (struct.isSetLoggedIn()) {
        oprot.writeBool(struct.loggedIn);
      }
      if (struct.isSetModerator()) {
        oprot.writeBool(struct.moderator);
      }
      if (struct.isSetInGame()) {
        oprot.writeString(struct.inGame);
      }
      if (struct.isSetPortsOpen()) {
        oprot.writeBool(struct.portsOpen);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetBasePort()) {
        oprot.writeI32(struct.basePort);
      }
      if (struct.isSetSecondaryPort()) {
        oprot.writeI32(struct.secondaryPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Player struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ipAddress = iprot.readString();
        struct.setIpAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loggedIn = iprot.readBool();
        struct.setLoggedInIsSet(true);
      }
      if (incoming.get(4)) {
        struct.moderator = iprot.readBool();
        struct.setModeratorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.inGame = iprot.readString();
        struct.setInGameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.portsOpen = iprot.readBool();
        struct.setPortsOpenIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = new PlayerStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.basePort = iprot.readI32();
        struct.setBasePortIsSet(true);
      }
      if (incoming.get(9)) {
        struct.secondaryPort = iprot.readI32();
        struct.setSecondaryPortIsSet(true);
      }
    }
  }

}

