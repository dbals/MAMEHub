/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-9")
public class Game implements org.apache.thrift.TBase<Game, Game._Fields>, java.io.Serializable, Cloneable, Comparable<Game> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Game");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("system", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ROM_FIELD_DESC = new org.apache.thrift.protocol.TField("rom", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField HOST_PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPlayerId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HOST_PLAYER_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPlayerIpAddress", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HOST_PLAYER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPlayerPort", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameTupleSchemeFactory());
  }

  public String id; // required
  public String system; // required
  public String rom; // required
  public boolean locked; // required
  public long startTime; // required
  public long endTime; // required
  public String hostPlayerId; // required
  public String hostPlayerIpAddress; // required
  public int hostPlayerPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SYSTEM((short)10, "system"),
    ROM((short)2, "rom"),
    LOCKED((short)4, "locked"),
    START_TIME((short)5, "startTime"),
    END_TIME((short)6, "endTime"),
    HOST_PLAYER_ID((short)7, "hostPlayerId"),
    HOST_PLAYER_IP_ADDRESS((short)8, "hostPlayerIpAddress"),
    HOST_PLAYER_PORT((short)9, "hostPlayerPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 10: // SYSTEM
          return SYSTEM;
        case 2: // ROM
          return ROM;
        case 4: // LOCKED
          return LOCKED;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // HOST_PLAYER_ID
          return HOST_PLAYER_ID;
        case 8: // HOST_PLAYER_IP_ADDRESS
          return HOST_PLAYER_IP_ADDRESS;
        case 9: // HOST_PLAYER_PORT
          return HOST_PLAYER_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCKED_ISSET_ID = 0;
  private static final int __STARTTIME_ISSET_ID = 1;
  private static final int __ENDTIME_ISSET_ID = 2;
  private static final int __HOSTPLAYERPORT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("system", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROM, new org.apache.thrift.meta_data.FieldMetaData("rom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOST_PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("hostPlayerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_PLAYER_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("hostPlayerIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_PLAYER_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPlayerPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Game.class, metaDataMap);
  }

  public Game() {
    this.locked = false;

    this.endTime = 0L;

  }

  public Game(
    String id,
    String system,
    String rom,
    boolean locked,
    long startTime,
    long endTime,
    String hostPlayerId,
    String hostPlayerIpAddress,
    int hostPlayerPort)
  {
    this();
    this.id = id;
    this.system = system;
    this.rom = rom;
    this.locked = locked;
    setLockedIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.hostPlayerId = hostPlayerId;
    this.hostPlayerIpAddress = hostPlayerIpAddress;
    this.hostPlayerPort = hostPlayerPort;
    setHostPlayerPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Game(Game other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetSystem()) {
      this.system = other.system;
    }
    if (other.isSetRom()) {
      this.rom = other.rom;
    }
    this.locked = other.locked;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetHostPlayerId()) {
      this.hostPlayerId = other.hostPlayerId;
    }
    if (other.isSetHostPlayerIpAddress()) {
      this.hostPlayerIpAddress = other.hostPlayerIpAddress;
    }
    this.hostPlayerPort = other.hostPlayerPort;
  }

  public Game deepCopy() {
    return new Game(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.system = null;
    this.rom = null;
    this.locked = false;

    setStartTimeIsSet(false);
    this.startTime = 0;
    this.endTime = 0L;

    this.hostPlayerId = null;
    this.hostPlayerIpAddress = null;
    setHostPlayerPortIsSet(false);
    this.hostPlayerPort = 0;
  }

  public String getId() {
    return this.id;
  }

  public Game setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getSystem() {
    return this.system;
  }

  public Game setSystem(String system) {
    this.system = system;
    return this;
  }

  public void unsetSystem() {
    this.system = null;
  }

  /** Returns true if field system is set (has been assigned a value) and false otherwise */
  public boolean isSetSystem() {
    return this.system != null;
  }

  public void setSystemIsSet(boolean value) {
    if (!value) {
      this.system = null;
    }
  }

  public String getRom() {
    return this.rom;
  }

  public Game setRom(String rom) {
    this.rom = rom;
    return this;
  }

  public void unsetRom() {
    this.rom = null;
  }

  /** Returns true if field rom is set (has been assigned a value) and false otherwise */
  public boolean isSetRom() {
    return this.rom != null;
  }

  public void setRomIsSet(boolean value) {
    if (!value) {
      this.rom = null;
    }
  }

  public boolean isLocked() {
    return this.locked;
  }

  public Game setLocked(boolean locked) {
    this.locked = locked;
    setLockedIsSet(true);
    return this;
  }

  public void unsetLocked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  /** Returns true if field locked is set (has been assigned a value) and false otherwise */
  public boolean isSetLocked() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  public void setLockedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKED_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public Game setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public Game setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public String getHostPlayerId() {
    return this.hostPlayerId;
  }

  public Game setHostPlayerId(String hostPlayerId) {
    this.hostPlayerId = hostPlayerId;
    return this;
  }

  public void unsetHostPlayerId() {
    this.hostPlayerId = null;
  }

  /** Returns true if field hostPlayerId is set (has been assigned a value) and false otherwise */
  public boolean isSetHostPlayerId() {
    return this.hostPlayerId != null;
  }

  public void setHostPlayerIdIsSet(boolean value) {
    if (!value) {
      this.hostPlayerId = null;
    }
  }

  public String getHostPlayerIpAddress() {
    return this.hostPlayerIpAddress;
  }

  public Game setHostPlayerIpAddress(String hostPlayerIpAddress) {
    this.hostPlayerIpAddress = hostPlayerIpAddress;
    return this;
  }

  public void unsetHostPlayerIpAddress() {
    this.hostPlayerIpAddress = null;
  }

  /** Returns true if field hostPlayerIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetHostPlayerIpAddress() {
    return this.hostPlayerIpAddress != null;
  }

  public void setHostPlayerIpAddressIsSet(boolean value) {
    if (!value) {
      this.hostPlayerIpAddress = null;
    }
  }

  public int getHostPlayerPort() {
    return this.hostPlayerPort;
  }

  public Game setHostPlayerPort(int hostPlayerPort) {
    this.hostPlayerPort = hostPlayerPort;
    setHostPlayerPortIsSet(true);
    return this;
  }

  public void unsetHostPlayerPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOSTPLAYERPORT_ISSET_ID);
  }

  /** Returns true if field hostPlayerPort is set (has been assigned a value) and false otherwise */
  public boolean isSetHostPlayerPort() {
    return EncodingUtils.testBit(__isset_bitfield, __HOSTPLAYERPORT_ISSET_ID);
  }

  public void setHostPlayerPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOSTPLAYERPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case SYSTEM:
      if (value == null) {
        unsetSystem();
      } else {
        setSystem((String)value);
      }
      break;

    case ROM:
      if (value == null) {
        unsetRom();
      } else {
        setRom((String)value);
      }
      break;

    case LOCKED:
      if (value == null) {
        unsetLocked();
      } else {
        setLocked((Boolean)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case HOST_PLAYER_ID:
      if (value == null) {
        unsetHostPlayerId();
      } else {
        setHostPlayerId((String)value);
      }
      break;

    case HOST_PLAYER_IP_ADDRESS:
      if (value == null) {
        unsetHostPlayerIpAddress();
      } else {
        setHostPlayerIpAddress((String)value);
      }
      break;

    case HOST_PLAYER_PORT:
      if (value == null) {
        unsetHostPlayerPort();
      } else {
        setHostPlayerPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SYSTEM:
      return getSystem();

    case ROM:
      return getRom();

    case LOCKED:
      return Boolean.valueOf(isLocked());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case HOST_PLAYER_ID:
      return getHostPlayerId();

    case HOST_PLAYER_IP_ADDRESS:
      return getHostPlayerIpAddress();

    case HOST_PLAYER_PORT:
      return Integer.valueOf(getHostPlayerPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SYSTEM:
      return isSetSystem();
    case ROM:
      return isSetRom();
    case LOCKED:
      return isSetLocked();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case HOST_PLAYER_ID:
      return isSetHostPlayerId();
    case HOST_PLAYER_IP_ADDRESS:
      return isSetHostPlayerIpAddress();
    case HOST_PLAYER_PORT:
      return isSetHostPlayerPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Game)
      return this.equals((Game)that);
    return false;
  }

  public boolean equals(Game that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_system = true && this.isSetSystem();
    boolean that_present_system = true && that.isSetSystem();
    if (this_present_system || that_present_system) {
      if (!(this_present_system && that_present_system))
        return false;
      if (!this.system.equals(that.system))
        return false;
    }

    boolean this_present_rom = true && this.isSetRom();
    boolean that_present_rom = true && that.isSetRom();
    if (this_present_rom || that_present_rom) {
      if (!(this_present_rom && that_present_rom))
        return false;
      if (!this.rom.equals(that.rom))
        return false;
    }

    boolean this_present_locked = true;
    boolean that_present_locked = true;
    if (this_present_locked || that_present_locked) {
      if (!(this_present_locked && that_present_locked))
        return false;
      if (this.locked != that.locked)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_hostPlayerId = true && this.isSetHostPlayerId();
    boolean that_present_hostPlayerId = true && that.isSetHostPlayerId();
    if (this_present_hostPlayerId || that_present_hostPlayerId) {
      if (!(this_present_hostPlayerId && that_present_hostPlayerId))
        return false;
      if (!this.hostPlayerId.equals(that.hostPlayerId))
        return false;
    }

    boolean this_present_hostPlayerIpAddress = true && this.isSetHostPlayerIpAddress();
    boolean that_present_hostPlayerIpAddress = true && that.isSetHostPlayerIpAddress();
    if (this_present_hostPlayerIpAddress || that_present_hostPlayerIpAddress) {
      if (!(this_present_hostPlayerIpAddress && that_present_hostPlayerIpAddress))
        return false;
      if (!this.hostPlayerIpAddress.equals(that.hostPlayerIpAddress))
        return false;
    }

    boolean this_present_hostPlayerPort = true;
    boolean that_present_hostPlayerPort = true;
    if (this_present_hostPlayerPort || that_present_hostPlayerPort) {
      if (!(this_present_hostPlayerPort && that_present_hostPlayerPort))
        return false;
      if (this.hostPlayerPort != that.hostPlayerPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Game other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystem()).compareTo(other.isSetSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system, other.system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRom()).compareTo(other.isSetRom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rom, other.rom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocked()).compareTo(other.isSetLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locked, other.locked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostPlayerId()).compareTo(other.isSetHostPlayerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostPlayerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPlayerId, other.hostPlayerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostPlayerIpAddress()).compareTo(other.isSetHostPlayerIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostPlayerIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPlayerIpAddress, other.hostPlayerIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostPlayerPort()).compareTo(other.isSetHostPlayerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostPlayerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPlayerPort, other.hostPlayerPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Game(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("system:");
    if (this.system == null) {
      sb.append("null");
    } else {
      sb.append(this.system);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rom:");
    if (this.rom == null) {
      sb.append("null");
    } else {
      sb.append(this.rom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locked:");
    sb.append(this.locked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostPlayerId:");
    if (this.hostPlayerId == null) {
      sb.append("null");
    } else {
      sb.append(this.hostPlayerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostPlayerIpAddress:");
    if (this.hostPlayerIpAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.hostPlayerIpAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostPlayerPort:");
    sb.append(this.hostPlayerPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameStandardSchemeFactory implements SchemeFactory {
    public GameStandardScheme getScheme() {
      return new GameStandardScheme();
    }
  }

  private static class GameStandardScheme extends StandardScheme<Game> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Game struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.system = iprot.readString();
              struct.setSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rom = iprot.readString();
              struct.setRomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.locked = iprot.readBool();
              struct.setLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOST_PLAYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostPlayerId = iprot.readString();
              struct.setHostPlayerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOST_PLAYER_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostPlayerIpAddress = iprot.readString();
              struct.setHostPlayerIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HOST_PLAYER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hostPlayerPort = iprot.readI32();
              struct.setHostPlayerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Game struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.rom != null) {
        oprot.writeFieldBegin(ROM_FIELD_DESC);
        oprot.writeString(struct.rom);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOCKED_FIELD_DESC);
      oprot.writeBool(struct.locked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.hostPlayerId != null) {
        oprot.writeFieldBegin(HOST_PLAYER_ID_FIELD_DESC);
        oprot.writeString(struct.hostPlayerId);
        oprot.writeFieldEnd();
      }
      if (struct.hostPlayerIpAddress != null) {
        oprot.writeFieldBegin(HOST_PLAYER_IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.hostPlayerIpAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOST_PLAYER_PORT_FIELD_DESC);
      oprot.writeI32(struct.hostPlayerPort);
      oprot.writeFieldEnd();
      if (struct.system != null) {
        oprot.writeFieldBegin(SYSTEM_FIELD_DESC);
        oprot.writeString(struct.system);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameTupleSchemeFactory implements SchemeFactory {
    public GameTupleScheme getScheme() {
      return new GameTupleScheme();
    }
  }

  private static class GameTupleScheme extends TupleScheme<Game> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Game struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSystem()) {
        optionals.set(1);
      }
      if (struct.isSetRom()) {
        optionals.set(2);
      }
      if (struct.isSetLocked()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetHostPlayerId()) {
        optionals.set(6);
      }
      if (struct.isSetHostPlayerIpAddress()) {
        optionals.set(7);
      }
      if (struct.isSetHostPlayerPort()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetSystem()) {
        oprot.writeString(struct.system);
      }
      if (struct.isSetRom()) {
        oprot.writeString(struct.rom);
      }
      if (struct.isSetLocked()) {
        oprot.writeBool(struct.locked);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetHostPlayerId()) {
        oprot.writeString(struct.hostPlayerId);
      }
      if (struct.isSetHostPlayerIpAddress()) {
        oprot.writeString(struct.hostPlayerIpAddress);
      }
      if (struct.isSetHostPlayerPort()) {
        oprot.writeI32(struct.hostPlayerPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Game struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.system = iprot.readString();
        struct.setSystemIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rom = iprot.readString();
        struct.setRomIsSet(true);
      }
      if (incoming.get(3)) {
        struct.locked = iprot.readBool();
        struct.setLockedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hostPlayerId = iprot.readString();
        struct.setHostPlayerIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hostPlayerIpAddress = iprot.readString();
        struct.setHostPlayerIpAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hostPlayerPort = iprot.readI32();
        struct.setHostPlayerPortIsSet(true);
      }
    }
  }

}

