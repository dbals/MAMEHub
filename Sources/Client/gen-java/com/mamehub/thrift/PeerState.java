/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-10")
public class PeerState implements org.apache.thrift.TBase<PeerState, PeerState._Fields>, java.io.Serializable, Cloneable, Comparable<PeerState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PeerState");

  private static final org.apache.thrift.protocol.TField CAN_CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("canConnect", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PING_FIELD_DESC = new org.apache.thrift.protocol.TField("ping", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DOWNLOADABLE_ROMS_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadableRoms", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastCheckTime", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PeerStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PeerStateTupleSchemeFactory());
  }

  public boolean canConnect; // required
  public int ping; // required
  public Map<String,Set<String>> downloadableRoms; // required
  public long lastCheckTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAN_CONNECT((short)1, "canConnect"),
    PING((short)2, "ping"),
    DOWNLOADABLE_ROMS((short)3, "downloadableRoms"),
    LAST_CHECK_TIME((short)4, "lastCheckTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAN_CONNECT
          return CAN_CONNECT;
        case 2: // PING
          return PING;
        case 3: // DOWNLOADABLE_ROMS
          return DOWNLOADABLE_ROMS;
        case 4: // LAST_CHECK_TIME
          return LAST_CHECK_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANCONNECT_ISSET_ID = 0;
  private static final int __PING_ISSET_ID = 1;
  private static final int __LASTCHECKTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAN_CONNECT, new org.apache.thrift.meta_data.FieldMetaData("canConnect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PING, new org.apache.thrift.meta_data.FieldMetaData("ping", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWNLOADABLE_ROMS, new org.apache.thrift.meta_data.FieldMetaData("downloadableRoms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.LAST_CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastCheckTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PeerState.class, metaDataMap);
  }

  public PeerState() {
    this.canConnect = false;

    this.ping = -1;

    this.downloadableRoms = new HashMap<String,Set<String>>();

    this.lastCheckTime = 0L;

  }

  public PeerState(
    boolean canConnect,
    int ping,
    Map<String,Set<String>> downloadableRoms,
    long lastCheckTime)
  {
    this();
    this.canConnect = canConnect;
    setCanConnectIsSet(true);
    this.ping = ping;
    setPingIsSet(true);
    this.downloadableRoms = downloadableRoms;
    this.lastCheckTime = lastCheckTime;
    setLastCheckTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PeerState(PeerState other) {
    __isset_bitfield = other.__isset_bitfield;
    this.canConnect = other.canConnect;
    this.ping = other.ping;
    if (other.isSetDownloadableRoms()) {
      Map<String,Set<String>> __this__downloadableRoms = new HashMap<String,Set<String>>(other.downloadableRoms.size());
      for (Map.Entry<String, Set<String>> other_element : other.downloadableRoms.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        String __this__downloadableRoms_copy_key = other_element_key;

        Set<String> __this__downloadableRoms_copy_value = new HashSet<String>(other_element_value);

        __this__downloadableRoms.put(__this__downloadableRoms_copy_key, __this__downloadableRoms_copy_value);
      }
      this.downloadableRoms = __this__downloadableRoms;
    }
    this.lastCheckTime = other.lastCheckTime;
  }

  public PeerState deepCopy() {
    return new PeerState(this);
  }

  @Override
  public void clear() {
    this.canConnect = false;

    this.ping = -1;

    this.downloadableRoms = new HashMap<String,Set<String>>();

    this.lastCheckTime = 0L;

  }

  public boolean isCanConnect() {
    return this.canConnect;
  }

  public PeerState setCanConnect(boolean canConnect) {
    this.canConnect = canConnect;
    setCanConnectIsSet(true);
    return this;
  }

  public void unsetCanConnect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCONNECT_ISSET_ID);
  }

  /** Returns true if field canConnect is set (has been assigned a value) and false otherwise */
  public boolean isSetCanConnect() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCONNECT_ISSET_ID);
  }

  public void setCanConnectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCONNECT_ISSET_ID, value);
  }

  public int getPing() {
    return this.ping;
  }

  public PeerState setPing(int ping) {
    this.ping = ping;
    setPingIsSet(true);
    return this;
  }

  public void unsetPing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PING_ISSET_ID);
  }

  /** Returns true if field ping is set (has been assigned a value) and false otherwise */
  public boolean isSetPing() {
    return EncodingUtils.testBit(__isset_bitfield, __PING_ISSET_ID);
  }

  public void setPingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PING_ISSET_ID, value);
  }

  public int getDownloadableRomsSize() {
    return (this.downloadableRoms == null) ? 0 : this.downloadableRoms.size();
  }

  public void putToDownloadableRoms(String key, Set<String> val) {
    if (this.downloadableRoms == null) {
      this.downloadableRoms = new HashMap<String,Set<String>>();
    }
    this.downloadableRoms.put(key, val);
  }

  public Map<String,Set<String>> getDownloadableRoms() {
    return this.downloadableRoms;
  }

  public PeerState setDownloadableRoms(Map<String,Set<String>> downloadableRoms) {
    this.downloadableRoms = downloadableRoms;
    return this;
  }

  public void unsetDownloadableRoms() {
    this.downloadableRoms = null;
  }

  /** Returns true if field downloadableRoms is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadableRoms() {
    return this.downloadableRoms != null;
  }

  public void setDownloadableRomsIsSet(boolean value) {
    if (!value) {
      this.downloadableRoms = null;
    }
  }

  public long getLastCheckTime() {
    return this.lastCheckTime;
  }

  public PeerState setLastCheckTime(long lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
    setLastCheckTimeIsSet(true);
    return this;
  }

  public void unsetLastCheckTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTCHECKTIME_ISSET_ID);
  }

  /** Returns true if field lastCheckTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastCheckTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTCHECKTIME_ISSET_ID);
  }

  public void setLastCheckTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTCHECKTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAN_CONNECT:
      if (value == null) {
        unsetCanConnect();
      } else {
        setCanConnect((Boolean)value);
      }
      break;

    case PING:
      if (value == null) {
        unsetPing();
      } else {
        setPing((Integer)value);
      }
      break;

    case DOWNLOADABLE_ROMS:
      if (value == null) {
        unsetDownloadableRoms();
      } else {
        setDownloadableRoms((Map<String,Set<String>>)value);
      }
      break;

    case LAST_CHECK_TIME:
      if (value == null) {
        unsetLastCheckTime();
      } else {
        setLastCheckTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAN_CONNECT:
      return Boolean.valueOf(isCanConnect());

    case PING:
      return Integer.valueOf(getPing());

    case DOWNLOADABLE_ROMS:
      return getDownloadableRoms();

    case LAST_CHECK_TIME:
      return Long.valueOf(getLastCheckTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAN_CONNECT:
      return isSetCanConnect();
    case PING:
      return isSetPing();
    case DOWNLOADABLE_ROMS:
      return isSetDownloadableRoms();
    case LAST_CHECK_TIME:
      return isSetLastCheckTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PeerState)
      return this.equals((PeerState)that);
    return false;
  }

  public boolean equals(PeerState that) {
    if (that == null)
      return false;

    boolean this_present_canConnect = true;
    boolean that_present_canConnect = true;
    if (this_present_canConnect || that_present_canConnect) {
      if (!(this_present_canConnect && that_present_canConnect))
        return false;
      if (this.canConnect != that.canConnect)
        return false;
    }

    boolean this_present_ping = true;
    boolean that_present_ping = true;
    if (this_present_ping || that_present_ping) {
      if (!(this_present_ping && that_present_ping))
        return false;
      if (this.ping != that.ping)
        return false;
    }

    boolean this_present_downloadableRoms = true && this.isSetDownloadableRoms();
    boolean that_present_downloadableRoms = true && that.isSetDownloadableRoms();
    if (this_present_downloadableRoms || that_present_downloadableRoms) {
      if (!(this_present_downloadableRoms && that_present_downloadableRoms))
        return false;
      if (!this.downloadableRoms.equals(that.downloadableRoms))
        return false;
    }

    boolean this_present_lastCheckTime = true;
    boolean that_present_lastCheckTime = true;
    if (this_present_lastCheckTime || that_present_lastCheckTime) {
      if (!(this_present_lastCheckTime && that_present_lastCheckTime))
        return false;
      if (this.lastCheckTime != that.lastCheckTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PeerState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCanConnect()).compareTo(other.isSetCanConnect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanConnect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canConnect, other.canConnect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPing()).compareTo(other.isSetPing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ping, other.ping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadableRoms()).compareTo(other.isSetDownloadableRoms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadableRoms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadableRoms, other.downloadableRoms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastCheckTime()).compareTo(other.isSetLastCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastCheckTime, other.lastCheckTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PeerState(");
    boolean first = true;

    sb.append("canConnect:");
    sb.append(this.canConnect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ping:");
    sb.append(this.ping);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downloadableRoms:");
    if (this.downloadableRoms == null) {
      sb.append("null");
    } else {
      sb.append(this.downloadableRoms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastCheckTime:");
    sb.append(this.lastCheckTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PeerStateStandardSchemeFactory implements SchemeFactory {
    public PeerStateStandardScheme getScheme() {
      return new PeerStateStandardScheme();
    }
  }

  private static class PeerStateStandardScheme extends StandardScheme<PeerState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PeerState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAN_CONNECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canConnect = iprot.readBool();
              struct.setCanConnectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ping = iprot.readI32();
              struct.setPingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOWNLOADABLE_ROMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                struct.downloadableRoms = new HashMap<String,Set<String>>(2*_map100.size);
                for (int _i101 = 0; _i101 < _map100.size; ++_i101)
                {
                  String _key102;
                  Set<String> _val103;
                  _key102 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set104 = iprot.readSetBegin();
                    _val103 = new HashSet<String>(2*_set104.size);
                    for (int _i105 = 0; _i105 < _set104.size; ++_i105)
                    {
                      String _elem106;
                      _elem106 = iprot.readString();
                      _val103.add(_elem106);
                    }
                    iprot.readSetEnd();
                  }
                  struct.downloadableRoms.put(_key102, _val103);
                }
                iprot.readMapEnd();
              }
              struct.setDownloadableRomsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastCheckTime = iprot.readI64();
              struct.setLastCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PeerState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CAN_CONNECT_FIELD_DESC);
      oprot.writeBool(struct.canConnect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PING_FIELD_DESC);
      oprot.writeI32(struct.ping);
      oprot.writeFieldEnd();
      if (struct.downloadableRoms != null) {
        oprot.writeFieldBegin(DOWNLOADABLE_ROMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.downloadableRoms.size()));
          for (Map.Entry<String, Set<String>> _iter107 : struct.downloadableRoms.entrySet())
          {
            oprot.writeString(_iter107.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter107.getValue().size()));
              for (String _iter108 : _iter107.getValue())
              {
                oprot.writeString(_iter108);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_CHECK_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastCheckTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PeerStateTupleSchemeFactory implements SchemeFactory {
    public PeerStateTupleScheme getScheme() {
      return new PeerStateTupleScheme();
    }
  }

  private static class PeerStateTupleScheme extends TupleScheme<PeerState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PeerState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCanConnect()) {
        optionals.set(0);
      }
      if (struct.isSetPing()) {
        optionals.set(1);
      }
      if (struct.isSetDownloadableRoms()) {
        optionals.set(2);
      }
      if (struct.isSetLastCheckTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCanConnect()) {
        oprot.writeBool(struct.canConnect);
      }
      if (struct.isSetPing()) {
        oprot.writeI32(struct.ping);
      }
      if (struct.isSetDownloadableRoms()) {
        {
          oprot.writeI32(struct.downloadableRoms.size());
          for (Map.Entry<String, Set<String>> _iter109 : struct.downloadableRoms.entrySet())
          {
            oprot.writeString(_iter109.getKey());
            {
              oprot.writeI32(_iter109.getValue().size());
              for (String _iter110 : _iter109.getValue())
              {
                oprot.writeString(_iter110);
              }
            }
          }
        }
      }
      if (struct.isSetLastCheckTime()) {
        oprot.writeI64(struct.lastCheckTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PeerState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.canConnect = iprot.readBool();
        struct.setCanConnectIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ping = iprot.readI32();
        struct.setPingIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map111 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.downloadableRoms = new HashMap<String,Set<String>>(2*_map111.size);
          for (int _i112 = 0; _i112 < _map111.size; ++_i112)
          {
            String _key113;
            Set<String> _val114;
            _key113 = iprot.readString();
            {
              org.apache.thrift.protocol.TSet _set115 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val114 = new HashSet<String>(2*_set115.size);
              for (int _i116 = 0; _i116 < _set115.size; ++_i116)
              {
                String _elem117;
                _elem117 = iprot.readString();
                _val114.add(_elem117);
              }
            }
            struct.downloadableRoms.put(_key113, _val114);
          }
        }
        struct.setDownloadableRomsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastCheckTime = iprot.readI64();
        struct.setLastCheckTimeIsSet(true);
      }
    }
  }

}

