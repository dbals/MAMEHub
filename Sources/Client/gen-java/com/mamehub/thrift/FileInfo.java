/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-10")
public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BAD_FIELD_DESC = new org.apache.thrift.protocol.TField("bad", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CRC32_FIELD_DESC = new org.apache.thrift.protocol.TField("crc32", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENTS_CRC32_FIELD_DESC = new org.apache.thrift.protocol.TField("contentsCrc32", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField CHD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chdName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SYSTEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("systemName", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileInfoTupleSchemeFactory());
  }

  public String id; // required
  public boolean bad; // required
  public String crc32; // required
  public long length; // required
  public Map<String,String> contentsCrc32; // required
  public String chdName; // required
  public String systemName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BAD((short)2, "bad"),
    CRC32((short)3, "crc32"),
    LENGTH((short)4, "length"),
    CONTENTS_CRC32((short)5, "contentsCrc32"),
    CHD_NAME((short)6, "chdName"),
    SYSTEM_NAME((short)7, "systemName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BAD
          return BAD;
        case 3: // CRC32
          return CRC32;
        case 4: // LENGTH
          return LENGTH;
        case 5: // CONTENTS_CRC32
          return CONTENTS_CRC32;
        case 6: // CHD_NAME
          return CHD_NAME;
        case 7: // SYSTEM_NAME
          return SYSTEM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BAD_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAD, new org.apache.thrift.meta_data.FieldMetaData("bad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CRC32, new org.apache.thrift.meta_data.FieldMetaData("crc32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENTS_CRC32, new org.apache.thrift.meta_data.FieldMetaData("contentsCrc32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHD_NAME, new org.apache.thrift.meta_data.FieldMetaData("chdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("systemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileInfo.class, metaDataMap);
  }

  public FileInfo() {
    this.contentsCrc32 = new HashMap<String,String>();

  }

  public FileInfo(
    String id,
    boolean bad,
    String crc32,
    long length,
    Map<String,String> contentsCrc32,
    String chdName,
    String systemName)
  {
    this();
    this.id = id;
    this.bad = bad;
    setBadIsSet(true);
    this.crc32 = crc32;
    this.length = length;
    setLengthIsSet(true);
    this.contentsCrc32 = contentsCrc32;
    this.chdName = chdName;
    this.systemName = systemName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileInfo(FileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.bad = other.bad;
    if (other.isSetCrc32()) {
      this.crc32 = other.crc32;
    }
    this.length = other.length;
    if (other.isSetContentsCrc32()) {
      Map<String,String> __this__contentsCrc32 = new HashMap<String,String>(other.contentsCrc32);
      this.contentsCrc32 = __this__contentsCrc32;
    }
    if (other.isSetChdName()) {
      this.chdName = other.chdName;
    }
    if (other.isSetSystemName()) {
      this.systemName = other.systemName;
    }
  }

  public FileInfo deepCopy() {
    return new FileInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setBadIsSet(false);
    this.bad = false;
    this.crc32 = null;
    setLengthIsSet(false);
    this.length = 0;
    this.contentsCrc32 = new HashMap<String,String>();

    this.chdName = null;
    this.systemName = null;
  }

  public String getId() {
    return this.id;
  }

  public FileInfo setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public boolean isBad() {
    return this.bad;
  }

  public FileInfo setBad(boolean bad) {
    this.bad = bad;
    setBadIsSet(true);
    return this;
  }

  public void unsetBad() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BAD_ISSET_ID);
  }

  /** Returns true if field bad is set (has been assigned a value) and false otherwise */
  public boolean isSetBad() {
    return EncodingUtils.testBit(__isset_bitfield, __BAD_ISSET_ID);
  }

  public void setBadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BAD_ISSET_ID, value);
  }

  public String getCrc32() {
    return this.crc32;
  }

  public FileInfo setCrc32(String crc32) {
    this.crc32 = crc32;
    return this;
  }

  public void unsetCrc32() {
    this.crc32 = null;
  }

  /** Returns true if field crc32 is set (has been assigned a value) and false otherwise */
  public boolean isSetCrc32() {
    return this.crc32 != null;
  }

  public void setCrc32IsSet(boolean value) {
    if (!value) {
      this.crc32 = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public FileInfo setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public int getContentsCrc32Size() {
    return (this.contentsCrc32 == null) ? 0 : this.contentsCrc32.size();
  }

  public void putToContentsCrc32(String key, String val) {
    if (this.contentsCrc32 == null) {
      this.contentsCrc32 = new HashMap<String,String>();
    }
    this.contentsCrc32.put(key, val);
  }

  public Map<String,String> getContentsCrc32() {
    return this.contentsCrc32;
  }

  public FileInfo setContentsCrc32(Map<String,String> contentsCrc32) {
    this.contentsCrc32 = contentsCrc32;
    return this;
  }

  public void unsetContentsCrc32() {
    this.contentsCrc32 = null;
  }

  /** Returns true if field contentsCrc32 is set (has been assigned a value) and false otherwise */
  public boolean isSetContentsCrc32() {
    return this.contentsCrc32 != null;
  }

  public void setContentsCrc32IsSet(boolean value) {
    if (!value) {
      this.contentsCrc32 = null;
    }
  }

  public String getChdName() {
    return this.chdName;
  }

  public FileInfo setChdName(String chdName) {
    this.chdName = chdName;
    return this;
  }

  public void unsetChdName() {
    this.chdName = null;
  }

  /** Returns true if field chdName is set (has been assigned a value) and false otherwise */
  public boolean isSetChdName() {
    return this.chdName != null;
  }

  public void setChdNameIsSet(boolean value) {
    if (!value) {
      this.chdName = null;
    }
  }

  public String getSystemName() {
    return this.systemName;
  }

  public FileInfo setSystemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  public void unsetSystemName() {
    this.systemName = null;
  }

  /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemName() {
    return this.systemName != null;
  }

  public void setSystemNameIsSet(boolean value) {
    if (!value) {
      this.systemName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case BAD:
      if (value == null) {
        unsetBad();
      } else {
        setBad((Boolean)value);
      }
      break;

    case CRC32:
      if (value == null) {
        unsetCrc32();
      } else {
        setCrc32((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case CONTENTS_CRC32:
      if (value == null) {
        unsetContentsCrc32();
      } else {
        setContentsCrc32((Map<String,String>)value);
      }
      break;

    case CHD_NAME:
      if (value == null) {
        unsetChdName();
      } else {
        setChdName((String)value);
      }
      break;

    case SYSTEM_NAME:
      if (value == null) {
        unsetSystemName();
      } else {
        setSystemName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case BAD:
      return Boolean.valueOf(isBad());

    case CRC32:
      return getCrc32();

    case LENGTH:
      return Long.valueOf(getLength());

    case CONTENTS_CRC32:
      return getContentsCrc32();

    case CHD_NAME:
      return getChdName();

    case SYSTEM_NAME:
      return getSystemName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BAD:
      return isSetBad();
    case CRC32:
      return isSetCrc32();
    case LENGTH:
      return isSetLength();
    case CONTENTS_CRC32:
      return isSetContentsCrc32();
    case CHD_NAME:
      return isSetChdName();
    case SYSTEM_NAME:
      return isSetSystemName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileInfo)
      return this.equals((FileInfo)that);
    return false;
  }

  public boolean equals(FileInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_bad = true;
    boolean that_present_bad = true;
    if (this_present_bad || that_present_bad) {
      if (!(this_present_bad && that_present_bad))
        return false;
      if (this.bad != that.bad)
        return false;
    }

    boolean this_present_crc32 = true && this.isSetCrc32();
    boolean that_present_crc32 = true && that.isSetCrc32();
    if (this_present_crc32 || that_present_crc32) {
      if (!(this_present_crc32 && that_present_crc32))
        return false;
      if (!this.crc32.equals(that.crc32))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_contentsCrc32 = true && this.isSetContentsCrc32();
    boolean that_present_contentsCrc32 = true && that.isSetContentsCrc32();
    if (this_present_contentsCrc32 || that_present_contentsCrc32) {
      if (!(this_present_contentsCrc32 && that_present_contentsCrc32))
        return false;
      if (!this.contentsCrc32.equals(that.contentsCrc32))
        return false;
    }

    boolean this_present_chdName = true && this.isSetChdName();
    boolean that_present_chdName = true && that.isSetChdName();
    if (this_present_chdName || that_present_chdName) {
      if (!(this_present_chdName && that_present_chdName))
        return false;
      if (!this.chdName.equals(that.chdName))
        return false;
    }

    boolean this_present_systemName = true && this.isSetSystemName();
    boolean that_present_systemName = true && that.isSetSystemName();
    if (this_present_systemName || that_present_systemName) {
      if (!(this_present_systemName && that_present_systemName))
        return false;
      if (!this.systemName.equals(that.systemName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBad()).compareTo(other.isSetBad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bad, other.bad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrc32()).compareTo(other.isSetCrc32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrc32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crc32, other.crc32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentsCrc32()).compareTo(other.isSetContentsCrc32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentsCrc32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentsCrc32, other.contentsCrc32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChdName()).compareTo(other.isSetChdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chdName, other.chdName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemName()).compareTo(other.isSetSystemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemName, other.systemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bad:");
    sb.append(this.bad);
    first = false;
    if (!first) sb.append(", ");
    sb.append("crc32:");
    if (this.crc32 == null) {
      sb.append("null");
    } else {
      sb.append(this.crc32);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentsCrc32:");
    if (this.contentsCrc32 == null) {
      sb.append("null");
    } else {
      sb.append(this.contentsCrc32);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chdName:");
    if (this.chdName == null) {
      sb.append("null");
    } else {
      sb.append(this.chdName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemName:");
    if (this.systemName == null) {
      sb.append("null");
    } else {
      sb.append(this.systemName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileInfoStandardSchemeFactory implements SchemeFactory {
    public FileInfoStandardScheme getScheme() {
      return new FileInfoStandardScheme();
    }
  }

  private static class FileInfoStandardScheme extends StandardScheme<FileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bad = iprot.readBool();
              struct.setBadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CRC32
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.crc32 = iprot.readString();
              struct.setCrc32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENTS_CRC32
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.contentsCrc32 = new HashMap<String,String>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  String _key36;
                  String _val37;
                  _key36 = iprot.readString();
                  _val37 = iprot.readString();
                  struct.contentsCrc32.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setContentsCrc32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chdName = iprot.readString();
              struct.setChdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYSTEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemName = iprot.readString();
              struct.setSystemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BAD_FIELD_DESC);
      oprot.writeBool(struct.bad);
      oprot.writeFieldEnd();
      if (struct.crc32 != null) {
        oprot.writeFieldBegin(CRC32_FIELD_DESC);
        oprot.writeString(struct.crc32);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      if (struct.contentsCrc32 != null) {
        oprot.writeFieldBegin(CONTENTS_CRC32_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.contentsCrc32.size()));
          for (Map.Entry<String, String> _iter38 : struct.contentsCrc32.entrySet())
          {
            oprot.writeString(_iter38.getKey());
            oprot.writeString(_iter38.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.chdName != null) {
        oprot.writeFieldBegin(CHD_NAME_FIELD_DESC);
        oprot.writeString(struct.chdName);
        oprot.writeFieldEnd();
      }
      if (struct.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(struct.systemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileInfoTupleSchemeFactory implements SchemeFactory {
    public FileInfoTupleScheme getScheme() {
      return new FileInfoTupleScheme();
    }
  }

  private static class FileInfoTupleScheme extends TupleScheme<FileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetBad()) {
        optionals.set(1);
      }
      if (struct.isSetCrc32()) {
        optionals.set(2);
      }
      if (struct.isSetLength()) {
        optionals.set(3);
      }
      if (struct.isSetContentsCrc32()) {
        optionals.set(4);
      }
      if (struct.isSetChdName()) {
        optionals.set(5);
      }
      if (struct.isSetSystemName()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetBad()) {
        oprot.writeBool(struct.bad);
      }
      if (struct.isSetCrc32()) {
        oprot.writeString(struct.crc32);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetContentsCrc32()) {
        {
          oprot.writeI32(struct.contentsCrc32.size());
          for (Map.Entry<String, String> _iter39 : struct.contentsCrc32.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            oprot.writeString(_iter39.getValue());
          }
        }
      }
      if (struct.isSetChdName()) {
        oprot.writeString(struct.chdName);
      }
      if (struct.isSetSystemName()) {
        oprot.writeString(struct.systemName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bad = iprot.readBool();
        struct.setBadIsSet(true);
      }
      if (incoming.get(2)) {
        struct.crc32 = iprot.readString();
        struct.setCrc32IsSet(true);
      }
      if (incoming.get(3)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.contentsCrc32 = new HashMap<String,String>(2*_map40.size);
          for (int _i41 = 0; _i41 < _map40.size; ++_i41)
          {
            String _key42;
            String _val43;
            _key42 = iprot.readString();
            _val43 = iprot.readString();
            struct.contentsCrc32.put(_key42, _val43);
          }
        }
        struct.setContentsCrc32IsSet(true);
      }
      if (incoming.get(5)) {
        struct.chdName = iprot.readString();
        struct.setChdNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.systemName = iprot.readString();
        struct.setSystemNameIsSet(true);
      }
    }
  }

}

