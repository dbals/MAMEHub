/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-9")
public class RomInfo implements org.apache.thrift.TBase<RomInfo, RomInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RomInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RomInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLONE_ROM_FIELD_DESC = new org.apache.thrift.protocol.TField("cloneRom", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_ROM_FIELD_DESC = new org.apache.thrift.protocol.TField("parentRom", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MISSING_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("missingReason", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CHD_FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chdFilename", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SOFTWARE_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("softwareLists", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("system", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField INTERFACE_FILE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceFileMap", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RomInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RomInfoTupleSchemeFactory());
  }

  public String id; // required
  public String cloneRom; // required
  public String parentRom; // required
  public String filename; // required
  public String description; // required
  /**
   * 
   * @see MR
   */
  public MR missingReason; // required
  public String chdFilename; // required
  public List<SoftwareList> softwareLists; // required
  public String system; // required
  public Map<String,String> interfaceFileMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CLONE_ROM((short)2, "cloneRom"),
    PARENT_ROM((short)3, "parentRom"),
    FILENAME((short)4, "filename"),
    DESCRIPTION((short)5, "description"),
    /**
     * 
     * @see MR
     */
    MISSING_REASON((short)6, "missingReason"),
    CHD_FILENAME((short)7, "chdFilename"),
    SOFTWARE_LISTS((short)8, "softwareLists"),
    SYSTEM((short)9, "system"),
    INTERFACE_FILE_MAP((short)10, "interfaceFileMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLONE_ROM
          return CLONE_ROM;
        case 3: // PARENT_ROM
          return PARENT_ROM;
        case 4: // FILENAME
          return FILENAME;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        case 6: // MISSING_REASON
          return MISSING_REASON;
        case 7: // CHD_FILENAME
          return CHD_FILENAME;
        case 8: // SOFTWARE_LISTS
          return SOFTWARE_LISTS;
        case 9: // SYSTEM
          return SYSTEM;
        case 10: // INTERFACE_FILE_MAP
          return INTERFACE_FILE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLONE_ROM, new org.apache.thrift.meta_data.FieldMetaData("cloneRom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ROM, new org.apache.thrift.meta_data.FieldMetaData("parentRom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MISSING_REASON, new org.apache.thrift.meta_data.FieldMetaData("missingReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MR.class)));
    tmpMap.put(_Fields.CHD_FILENAME, new org.apache.thrift.meta_data.FieldMetaData("chdFilename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOFTWARE_LISTS, new org.apache.thrift.meta_data.FieldMetaData("softwareLists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SoftwareList.class))));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("system", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERFACE_FILE_MAP, new org.apache.thrift.meta_data.FieldMetaData("interfaceFileMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RomInfo.class, metaDataMap);
  }

  public RomInfo() {
    this.softwareLists = new ArrayList<SoftwareList>();

    this.interfaceFileMap = new HashMap<String,String>();

  }

  public RomInfo(
    String id,
    String cloneRom,
    String parentRom,
    String filename,
    String description,
    MR missingReason,
    String chdFilename,
    List<SoftwareList> softwareLists,
    String system,
    Map<String,String> interfaceFileMap)
  {
    this();
    this.id = id;
    this.cloneRom = cloneRom;
    this.parentRom = parentRom;
    this.filename = filename;
    this.description = description;
    this.missingReason = missingReason;
    this.chdFilename = chdFilename;
    this.softwareLists = softwareLists;
    this.system = system;
    this.interfaceFileMap = interfaceFileMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RomInfo(RomInfo other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCloneRom()) {
      this.cloneRom = other.cloneRom;
    }
    if (other.isSetParentRom()) {
      this.parentRom = other.parentRom;
    }
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetMissingReason()) {
      this.missingReason = other.missingReason;
    }
    if (other.isSetChdFilename()) {
      this.chdFilename = other.chdFilename;
    }
    if (other.isSetSoftwareLists()) {
      List<SoftwareList> __this__softwareLists = new ArrayList<SoftwareList>(other.softwareLists.size());
      for (SoftwareList other_element : other.softwareLists) {
        __this__softwareLists.add(new SoftwareList(other_element));
      }
      this.softwareLists = __this__softwareLists;
    }
    if (other.isSetSystem()) {
      this.system = other.system;
    }
    if (other.isSetInterfaceFileMap()) {
      Map<String,String> __this__interfaceFileMap = new HashMap<String,String>(other.interfaceFileMap);
      this.interfaceFileMap = __this__interfaceFileMap;
    }
  }

  public RomInfo deepCopy() {
    return new RomInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.cloneRom = null;
    this.parentRom = null;
    this.filename = null;
    this.description = null;
    this.missingReason = null;
    this.chdFilename = null;
    this.softwareLists = new ArrayList<SoftwareList>();

    this.system = null;
    this.interfaceFileMap = new HashMap<String,String>();

  }

  public String getId() {
    return this.id;
  }

  public RomInfo setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getCloneRom() {
    return this.cloneRom;
  }

  public RomInfo setCloneRom(String cloneRom) {
    this.cloneRom = cloneRom;
    return this;
  }

  public void unsetCloneRom() {
    this.cloneRom = null;
  }

  /** Returns true if field cloneRom is set (has been assigned a value) and false otherwise */
  public boolean isSetCloneRom() {
    return this.cloneRom != null;
  }

  public void setCloneRomIsSet(boolean value) {
    if (!value) {
      this.cloneRom = null;
    }
  }

  public String getParentRom() {
    return this.parentRom;
  }

  public RomInfo setParentRom(String parentRom) {
    this.parentRom = parentRom;
    return this;
  }

  public void unsetParentRom() {
    this.parentRom = null;
  }

  /** Returns true if field parentRom is set (has been assigned a value) and false otherwise */
  public boolean isSetParentRom() {
    return this.parentRom != null;
  }

  public void setParentRomIsSet(boolean value) {
    if (!value) {
      this.parentRom = null;
    }
  }

  public String getFilename() {
    return this.filename;
  }

  public RomInfo setFilename(String filename) {
    this.filename = filename;
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public RomInfo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 
   * @see MR
   */
  public MR getMissingReason() {
    return this.missingReason;
  }

  /**
   * 
   * @see MR
   */
  public RomInfo setMissingReason(MR missingReason) {
    this.missingReason = missingReason;
    return this;
  }

  public void unsetMissingReason() {
    this.missingReason = null;
  }

  /** Returns true if field missingReason is set (has been assigned a value) and false otherwise */
  public boolean isSetMissingReason() {
    return this.missingReason != null;
  }

  public void setMissingReasonIsSet(boolean value) {
    if (!value) {
      this.missingReason = null;
    }
  }

  public String getChdFilename() {
    return this.chdFilename;
  }

  public RomInfo setChdFilename(String chdFilename) {
    this.chdFilename = chdFilename;
    return this;
  }

  public void unsetChdFilename() {
    this.chdFilename = null;
  }

  /** Returns true if field chdFilename is set (has been assigned a value) and false otherwise */
  public boolean isSetChdFilename() {
    return this.chdFilename != null;
  }

  public void setChdFilenameIsSet(boolean value) {
    if (!value) {
      this.chdFilename = null;
    }
  }

  public int getSoftwareListsSize() {
    return (this.softwareLists == null) ? 0 : this.softwareLists.size();
  }

  public java.util.Iterator<SoftwareList> getSoftwareListsIterator() {
    return (this.softwareLists == null) ? null : this.softwareLists.iterator();
  }

  public void addToSoftwareLists(SoftwareList elem) {
    if (this.softwareLists == null) {
      this.softwareLists = new ArrayList<SoftwareList>();
    }
    this.softwareLists.add(elem);
  }

  public List<SoftwareList> getSoftwareLists() {
    return this.softwareLists;
  }

  public RomInfo setSoftwareLists(List<SoftwareList> softwareLists) {
    this.softwareLists = softwareLists;
    return this;
  }

  public void unsetSoftwareLists() {
    this.softwareLists = null;
  }

  /** Returns true if field softwareLists is set (has been assigned a value) and false otherwise */
  public boolean isSetSoftwareLists() {
    return this.softwareLists != null;
  }

  public void setSoftwareListsIsSet(boolean value) {
    if (!value) {
      this.softwareLists = null;
    }
  }

  public String getSystem() {
    return this.system;
  }

  public RomInfo setSystem(String system) {
    this.system = system;
    return this;
  }

  public void unsetSystem() {
    this.system = null;
  }

  /** Returns true if field system is set (has been assigned a value) and false otherwise */
  public boolean isSetSystem() {
    return this.system != null;
  }

  public void setSystemIsSet(boolean value) {
    if (!value) {
      this.system = null;
    }
  }

  public int getInterfaceFileMapSize() {
    return (this.interfaceFileMap == null) ? 0 : this.interfaceFileMap.size();
  }

  public void putToInterfaceFileMap(String key, String val) {
    if (this.interfaceFileMap == null) {
      this.interfaceFileMap = new HashMap<String,String>();
    }
    this.interfaceFileMap.put(key, val);
  }

  public Map<String,String> getInterfaceFileMap() {
    return this.interfaceFileMap;
  }

  public RomInfo setInterfaceFileMap(Map<String,String> interfaceFileMap) {
    this.interfaceFileMap = interfaceFileMap;
    return this;
  }

  public void unsetInterfaceFileMap() {
    this.interfaceFileMap = null;
  }

  /** Returns true if field interfaceFileMap is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceFileMap() {
    return this.interfaceFileMap != null;
  }

  public void setInterfaceFileMapIsSet(boolean value) {
    if (!value) {
      this.interfaceFileMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CLONE_ROM:
      if (value == null) {
        unsetCloneRom();
      } else {
        setCloneRom((String)value);
      }
      break;

    case PARENT_ROM:
      if (value == null) {
        unsetParentRom();
      } else {
        setParentRom((String)value);
      }
      break;

    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case MISSING_REASON:
      if (value == null) {
        unsetMissingReason();
      } else {
        setMissingReason((MR)value);
      }
      break;

    case CHD_FILENAME:
      if (value == null) {
        unsetChdFilename();
      } else {
        setChdFilename((String)value);
      }
      break;

    case SOFTWARE_LISTS:
      if (value == null) {
        unsetSoftwareLists();
      } else {
        setSoftwareLists((List<SoftwareList>)value);
      }
      break;

    case SYSTEM:
      if (value == null) {
        unsetSystem();
      } else {
        setSystem((String)value);
      }
      break;

    case INTERFACE_FILE_MAP:
      if (value == null) {
        unsetInterfaceFileMap();
      } else {
        setInterfaceFileMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CLONE_ROM:
      return getCloneRom();

    case PARENT_ROM:
      return getParentRom();

    case FILENAME:
      return getFilename();

    case DESCRIPTION:
      return getDescription();

    case MISSING_REASON:
      return getMissingReason();

    case CHD_FILENAME:
      return getChdFilename();

    case SOFTWARE_LISTS:
      return getSoftwareLists();

    case SYSTEM:
      return getSystem();

    case INTERFACE_FILE_MAP:
      return getInterfaceFileMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLONE_ROM:
      return isSetCloneRom();
    case PARENT_ROM:
      return isSetParentRom();
    case FILENAME:
      return isSetFilename();
    case DESCRIPTION:
      return isSetDescription();
    case MISSING_REASON:
      return isSetMissingReason();
    case CHD_FILENAME:
      return isSetChdFilename();
    case SOFTWARE_LISTS:
      return isSetSoftwareLists();
    case SYSTEM:
      return isSetSystem();
    case INTERFACE_FILE_MAP:
      return isSetInterfaceFileMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RomInfo)
      return this.equals((RomInfo)that);
    return false;
  }

  public boolean equals(RomInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_cloneRom = true && this.isSetCloneRom();
    boolean that_present_cloneRom = true && that.isSetCloneRom();
    if (this_present_cloneRom || that_present_cloneRom) {
      if (!(this_present_cloneRom && that_present_cloneRom))
        return false;
      if (!this.cloneRom.equals(that.cloneRom))
        return false;
    }

    boolean this_present_parentRom = true && this.isSetParentRom();
    boolean that_present_parentRom = true && that.isSetParentRom();
    if (this_present_parentRom || that_present_parentRom) {
      if (!(this_present_parentRom && that_present_parentRom))
        return false;
      if (!this.parentRom.equals(that.parentRom))
        return false;
    }

    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_missingReason = true && this.isSetMissingReason();
    boolean that_present_missingReason = true && that.isSetMissingReason();
    if (this_present_missingReason || that_present_missingReason) {
      if (!(this_present_missingReason && that_present_missingReason))
        return false;
      if (!this.missingReason.equals(that.missingReason))
        return false;
    }

    boolean this_present_chdFilename = true && this.isSetChdFilename();
    boolean that_present_chdFilename = true && that.isSetChdFilename();
    if (this_present_chdFilename || that_present_chdFilename) {
      if (!(this_present_chdFilename && that_present_chdFilename))
        return false;
      if (!this.chdFilename.equals(that.chdFilename))
        return false;
    }

    boolean this_present_softwareLists = true && this.isSetSoftwareLists();
    boolean that_present_softwareLists = true && that.isSetSoftwareLists();
    if (this_present_softwareLists || that_present_softwareLists) {
      if (!(this_present_softwareLists && that_present_softwareLists))
        return false;
      if (!this.softwareLists.equals(that.softwareLists))
        return false;
    }

    boolean this_present_system = true && this.isSetSystem();
    boolean that_present_system = true && that.isSetSystem();
    if (this_present_system || that_present_system) {
      if (!(this_present_system && that_present_system))
        return false;
      if (!this.system.equals(that.system))
        return false;
    }

    boolean this_present_interfaceFileMap = true && this.isSetInterfaceFileMap();
    boolean that_present_interfaceFileMap = true && that.isSetInterfaceFileMap();
    if (this_present_interfaceFileMap || that_present_interfaceFileMap) {
      if (!(this_present_interfaceFileMap && that_present_interfaceFileMap))
        return false;
      if (!this.interfaceFileMap.equals(that.interfaceFileMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RomInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloneRom()).compareTo(other.isSetCloneRom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloneRom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloneRom, other.cloneRom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentRom()).compareTo(other.isSetParentRom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentRom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentRom, other.parentRom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissingReason()).compareTo(other.isSetMissingReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissingReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missingReason, other.missingReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChdFilename()).compareTo(other.isSetChdFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChdFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chdFilename, other.chdFilename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoftwareLists()).compareTo(other.isSetSoftwareLists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoftwareLists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.softwareLists, other.softwareLists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystem()).compareTo(other.isSetSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system, other.system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterfaceFileMap()).compareTo(other.isSetInterfaceFileMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceFileMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceFileMap, other.interfaceFileMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RomInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cloneRom:");
    if (this.cloneRom == null) {
      sb.append("null");
    } else {
      sb.append(this.cloneRom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentRom:");
    if (this.parentRom == null) {
      sb.append("null");
    } else {
      sb.append(this.parentRom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filename:");
    if (this.filename == null) {
      sb.append("null");
    } else {
      sb.append(this.filename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("missingReason:");
    if (this.missingReason == null) {
      sb.append("null");
    } else {
      sb.append(this.missingReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chdFilename:");
    if (this.chdFilename == null) {
      sb.append("null");
    } else {
      sb.append(this.chdFilename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("softwareLists:");
    if (this.softwareLists == null) {
      sb.append("null");
    } else {
      sb.append(this.softwareLists);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("system:");
    if (this.system == null) {
      sb.append("null");
    } else {
      sb.append(this.system);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interfaceFileMap:");
    if (this.interfaceFileMap == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceFileMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RomInfoStandardSchemeFactory implements SchemeFactory {
    public RomInfoStandardScheme getScheme() {
      return new RomInfoStandardScheme();
    }
  }

  private static class RomInfoStandardScheme extends StandardScheme<RomInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RomInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLONE_ROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cloneRom = iprot.readString();
              struct.setCloneRomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_ROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentRom = iprot.readString();
              struct.setParentRomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MISSING_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.missingReason = MR.findByValue(iprot.readI32());
              struct.setMissingReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHD_FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chdFilename = iprot.readString();
              struct.setChdFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOFTWARE_LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.softwareLists = new ArrayList<SoftwareList>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  SoftwareList _elem2;
                  _elem2 = new SoftwareList();
                  _elem2.read(iprot);
                  struct.softwareLists.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSoftwareListsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.system = iprot.readString();
              struct.setSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INTERFACE_FILE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.interfaceFileMap = new HashMap<String,String>(2*_map3.size);
                for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                {
                  String _key5;
                  String _val6;
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.interfaceFileMap.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setInterfaceFileMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RomInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.cloneRom != null) {
        oprot.writeFieldBegin(CLONE_ROM_FIELD_DESC);
        oprot.writeString(struct.cloneRom);
        oprot.writeFieldEnd();
      }
      if (struct.parentRom != null) {
        oprot.writeFieldBegin(PARENT_ROM_FIELD_DESC);
        oprot.writeString(struct.parentRom);
        oprot.writeFieldEnd();
      }
      if (struct.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(struct.filename);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.missingReason != null) {
        oprot.writeFieldBegin(MISSING_REASON_FIELD_DESC);
        oprot.writeI32(struct.missingReason.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.chdFilename != null) {
        oprot.writeFieldBegin(CHD_FILENAME_FIELD_DESC);
        oprot.writeString(struct.chdFilename);
        oprot.writeFieldEnd();
      }
      if (struct.softwareLists != null) {
        oprot.writeFieldBegin(SOFTWARE_LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.softwareLists.size()));
          for (SoftwareList _iter7 : struct.softwareLists)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.system != null) {
        oprot.writeFieldBegin(SYSTEM_FIELD_DESC);
        oprot.writeString(struct.system);
        oprot.writeFieldEnd();
      }
      if (struct.interfaceFileMap != null) {
        oprot.writeFieldBegin(INTERFACE_FILE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.interfaceFileMap.size()));
          for (Map.Entry<String, String> _iter8 : struct.interfaceFileMap.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeString(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RomInfoTupleSchemeFactory implements SchemeFactory {
    public RomInfoTupleScheme getScheme() {
      return new RomInfoTupleScheme();
    }
  }

  private static class RomInfoTupleScheme extends TupleScheme<RomInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RomInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCloneRom()) {
        optionals.set(1);
      }
      if (struct.isSetParentRom()) {
        optionals.set(2);
      }
      if (struct.isSetFilename()) {
        optionals.set(3);
      }
      if (struct.isSetDescription()) {
        optionals.set(4);
      }
      if (struct.isSetMissingReason()) {
        optionals.set(5);
      }
      if (struct.isSetChdFilename()) {
        optionals.set(6);
      }
      if (struct.isSetSoftwareLists()) {
        optionals.set(7);
      }
      if (struct.isSetSystem()) {
        optionals.set(8);
      }
      if (struct.isSetInterfaceFileMap()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCloneRom()) {
        oprot.writeString(struct.cloneRom);
      }
      if (struct.isSetParentRom()) {
        oprot.writeString(struct.parentRom);
      }
      if (struct.isSetFilename()) {
        oprot.writeString(struct.filename);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetMissingReason()) {
        oprot.writeI32(struct.missingReason.getValue());
      }
      if (struct.isSetChdFilename()) {
        oprot.writeString(struct.chdFilename);
      }
      if (struct.isSetSoftwareLists()) {
        {
          oprot.writeI32(struct.softwareLists.size());
          for (SoftwareList _iter9 : struct.softwareLists)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetSystem()) {
        oprot.writeString(struct.system);
      }
      if (struct.isSetInterfaceFileMap()) {
        {
          oprot.writeI32(struct.interfaceFileMap.size());
          for (Map.Entry<String, String> _iter10 : struct.interfaceFileMap.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RomInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cloneRom = iprot.readString();
        struct.setCloneRomIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentRom = iprot.readString();
        struct.setParentRomIsSet(true);
      }
      if (incoming.get(3)) {
        struct.filename = iprot.readString();
        struct.setFilenameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.missingReason = MR.findByValue(iprot.readI32());
        struct.setMissingReasonIsSet(true);
      }
      if (incoming.get(6)) {
        struct.chdFilename = iprot.readString();
        struct.setChdFilenameIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.softwareLists = new ArrayList<SoftwareList>(_list11.size);
          for (int _i12 = 0; _i12 < _list11.size; ++_i12)
          {
            SoftwareList _elem13;
            _elem13 = new SoftwareList();
            _elem13.read(iprot);
            struct.softwareLists.add(_elem13);
          }
        }
        struct.setSoftwareListsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.system = iprot.readString();
        struct.setSystemIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.interfaceFileMap = new HashMap<String,String>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16;
            String _val17;
            _key16 = iprot.readString();
            _val17 = iprot.readString();
            struct.interfaceFileMap.put(_key16, _val17);
          }
        }
        struct.setInterfaceFileMapIsSet(true);
      }
    }
  }

}

