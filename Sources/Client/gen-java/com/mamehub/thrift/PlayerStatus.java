/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-9")
public class PlayerStatus implements org.apache.thrift.TBase<PlayerStatus, PlayerStatus._Fields>, java.io.Serializable, Cloneable, Comparable<PlayerStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerStatus");

  private static final org.apache.thrift.protocol.TField CHAT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("chatStatus", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATING_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("operatingSystem", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerStatusTupleSchemeFactory());
  }

  /**
   * 
   * @see ChatStatus
   */
  public ChatStatus chatStatus; // required
  /**
   * 
   * @see OperatingSystem
   */
  public OperatingSystem operatingSystem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ChatStatus
     */
    CHAT_STATUS((short)1, "chatStatus"),
    /**
     * 
     * @see OperatingSystem
     */
    OPERATING_SYSTEM((short)2, "operatingSystem");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAT_STATUS
          return CHAT_STATUS;
        case 2: // OPERATING_SYSTEM
          return OPERATING_SYSTEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("chatStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChatStatus.class)));
    tmpMap.put(_Fields.OPERATING_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("operatingSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperatingSystem.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerStatus.class, metaDataMap);
  }

  public PlayerStatus() {
  }

  public PlayerStatus(
    ChatStatus chatStatus,
    OperatingSystem operatingSystem)
  {
    this();
    this.chatStatus = chatStatus;
    this.operatingSystem = operatingSystem;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerStatus(PlayerStatus other) {
    if (other.isSetChatStatus()) {
      this.chatStatus = other.chatStatus;
    }
    if (other.isSetOperatingSystem()) {
      this.operatingSystem = other.operatingSystem;
    }
  }

  public PlayerStatus deepCopy() {
    return new PlayerStatus(this);
  }

  @Override
  public void clear() {
    this.chatStatus = null;
    this.operatingSystem = null;
  }

  /**
   * 
   * @see ChatStatus
   */
  public ChatStatus getChatStatus() {
    return this.chatStatus;
  }

  /**
   * 
   * @see ChatStatus
   */
  public PlayerStatus setChatStatus(ChatStatus chatStatus) {
    this.chatStatus = chatStatus;
    return this;
  }

  public void unsetChatStatus() {
    this.chatStatus = null;
  }

  /** Returns true if field chatStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetChatStatus() {
    return this.chatStatus != null;
  }

  public void setChatStatusIsSet(boolean value) {
    if (!value) {
      this.chatStatus = null;
    }
  }

  /**
   * 
   * @see OperatingSystem
   */
  public OperatingSystem getOperatingSystem() {
    return this.operatingSystem;
  }

  /**
   * 
   * @see OperatingSystem
   */
  public PlayerStatus setOperatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  public void unsetOperatingSystem() {
    this.operatingSystem = null;
  }

  /** Returns true if field operatingSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatingSystem() {
    return this.operatingSystem != null;
  }

  public void setOperatingSystemIsSet(boolean value) {
    if (!value) {
      this.operatingSystem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAT_STATUS:
      if (value == null) {
        unsetChatStatus();
      } else {
        setChatStatus((ChatStatus)value);
      }
      break;

    case OPERATING_SYSTEM:
      if (value == null) {
        unsetOperatingSystem();
      } else {
        setOperatingSystem((OperatingSystem)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAT_STATUS:
      return getChatStatus();

    case OPERATING_SYSTEM:
      return getOperatingSystem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAT_STATUS:
      return isSetChatStatus();
    case OPERATING_SYSTEM:
      return isSetOperatingSystem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayerStatus)
      return this.equals((PlayerStatus)that);
    return false;
  }

  public boolean equals(PlayerStatus that) {
    if (that == null)
      return false;

    boolean this_present_chatStatus = true && this.isSetChatStatus();
    boolean that_present_chatStatus = true && that.isSetChatStatus();
    if (this_present_chatStatus || that_present_chatStatus) {
      if (!(this_present_chatStatus && that_present_chatStatus))
        return false;
      if (!this.chatStatus.equals(that.chatStatus))
        return false;
    }

    boolean this_present_operatingSystem = true && this.isSetOperatingSystem();
    boolean that_present_operatingSystem = true && that.isSetOperatingSystem();
    if (this_present_operatingSystem || that_present_operatingSystem) {
      if (!(this_present_operatingSystem && that_present_operatingSystem))
        return false;
      if (!this.operatingSystem.equals(that.operatingSystem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlayerStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChatStatus()).compareTo(other.isSetChatStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatStatus, other.chatStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatingSystem()).compareTo(other.isSetOperatingSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatingSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatingSystem, other.operatingSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayerStatus(");
    boolean first = true;

    sb.append("chatStatus:");
    if (this.chatStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.chatStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatingSystem:");
    if (this.operatingSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.operatingSystem);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerStatusStandardSchemeFactory implements SchemeFactory {
    public PlayerStatusStandardScheme getScheme() {
      return new PlayerStatusStandardScheme();
    }
  }

  private static class PlayerStatusStandardScheme extends StandardScheme<PlayerStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chatStatus = ChatStatus.findByValue(iprot.readI32());
              struct.setChatStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATING_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatingSystem = OperatingSystem.findByValue(iprot.readI32());
              struct.setOperatingSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatStatus != null) {
        oprot.writeFieldBegin(CHAT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.chatStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.operatingSystem != null) {
        oprot.writeFieldBegin(OPERATING_SYSTEM_FIELD_DESC);
        oprot.writeI32(struct.operatingSystem.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerStatusTupleSchemeFactory implements SchemeFactory {
    public PlayerStatusTupleScheme getScheme() {
      return new PlayerStatusTupleScheme();
    }
  }

  private static class PlayerStatusTupleScheme extends TupleScheme<PlayerStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChatStatus()) {
        optionals.set(0);
      }
      if (struct.isSetOperatingSystem()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChatStatus()) {
        oprot.writeI32(struct.chatStatus.getValue());
      }
      if (struct.isSetOperatingSystem()) {
        oprot.writeI32(struct.operatingSystem.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.chatStatus = ChatStatus.findByValue(iprot.readI32());
        struct.setChatStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operatingSystem = OperatingSystem.findByValue(iprot.readI32());
        struct.setOperatingSystemIsSet(true);
      }
    }
  }

}

