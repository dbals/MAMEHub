/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mamehub.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2013-12-9")
public class ApplicationSettings implements org.apache.thrift.TBase<ApplicationSettings, ApplicationSettings._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationSettings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationSettings");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHAT_AUDIO_FIELD_DESC = new org.apache.thrift.protocol.TField("chatAudio", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CHAT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("chatStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_INTERNAL_LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastInternalLoginId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALLOW_UPLOADING_FIELD_DESC = new org.apache.thrift.protocol.TField("allowUploading", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField SHOW_EMULATOR_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("showEmulatorLog", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BASE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("basePort", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SECONDARY_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaryPort", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplicationSettingsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplicationSettingsTupleSchemeFactory());
  }

  public String id; // required
  public boolean chatAudio; // required
  /**
   * 
   * @see ChatStatus
   */
  public ChatStatus chatStatus; // required
  public String lastInternalLoginId; // required
  public boolean allowUploading; // required
  public boolean showEmulatorLog; // required
  public int basePort; // required
  public int secondaryPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CHAT_AUDIO((short)2, "chatAudio"),
    /**
     * 
     * @see ChatStatus
     */
    CHAT_STATUS((short)3, "chatStatus"),
    LAST_INTERNAL_LOGIN_ID((short)4, "lastInternalLoginId"),
    ALLOW_UPLOADING((short)5, "allowUploading"),
    SHOW_EMULATOR_LOG((short)6, "showEmulatorLog"),
    BASE_PORT((short)7, "basePort"),
    SECONDARY_PORT((short)8, "secondaryPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CHAT_AUDIO
          return CHAT_AUDIO;
        case 3: // CHAT_STATUS
          return CHAT_STATUS;
        case 4: // LAST_INTERNAL_LOGIN_ID
          return LAST_INTERNAL_LOGIN_ID;
        case 5: // ALLOW_UPLOADING
          return ALLOW_UPLOADING;
        case 6: // SHOW_EMULATOR_LOG
          return SHOW_EMULATOR_LOG;
        case 7: // BASE_PORT
          return BASE_PORT;
        case 8: // SECONDARY_PORT
          return SECONDARY_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHATAUDIO_ISSET_ID = 0;
  private static final int __ALLOWUPLOADING_ISSET_ID = 1;
  private static final int __SHOWEMULATORLOG_ISSET_ID = 2;
  private static final int __BASEPORT_ISSET_ID = 3;
  private static final int __SECONDARYPORT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAT_AUDIO, new org.apache.thrift.meta_data.FieldMetaData("chatAudio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHAT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("chatStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChatStatus.class)));
    tmpMap.put(_Fields.LAST_INTERNAL_LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("lastInternalLoginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_UPLOADING, new org.apache.thrift.meta_data.FieldMetaData("allowUploading", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOW_EMULATOR_LOG, new org.apache.thrift.meta_data.FieldMetaData("showEmulatorLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BASE_PORT, new org.apache.thrift.meta_data.FieldMetaData("basePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECONDARY_PORT, new org.apache.thrift.meta_data.FieldMetaData("secondaryPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationSettings.class, metaDataMap);
  }

  public ApplicationSettings() {
    this.id = "1";

    this.chatAudio = true;

    this.chatStatus = com.mamehub.thrift.ChatStatus.ONLINE;

    this.lastInternalLoginId = "";

    this.allowUploading = true;

    this.showEmulatorLog = false;

    this.basePort = 6805;

    this.secondaryPort = 6806;

  }

  public ApplicationSettings(
    String id,
    boolean chatAudio,
    ChatStatus chatStatus,
    String lastInternalLoginId,
    boolean allowUploading,
    boolean showEmulatorLog,
    int basePort,
    int secondaryPort)
  {
    this();
    this.id = id;
    this.chatAudio = chatAudio;
    setChatAudioIsSet(true);
    this.chatStatus = chatStatus;
    this.lastInternalLoginId = lastInternalLoginId;
    this.allowUploading = allowUploading;
    setAllowUploadingIsSet(true);
    this.showEmulatorLog = showEmulatorLog;
    setShowEmulatorLogIsSet(true);
    this.basePort = basePort;
    setBasePortIsSet(true);
    this.secondaryPort = secondaryPort;
    setSecondaryPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationSettings(ApplicationSettings other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.chatAudio = other.chatAudio;
    if (other.isSetChatStatus()) {
      this.chatStatus = other.chatStatus;
    }
    if (other.isSetLastInternalLoginId()) {
      this.lastInternalLoginId = other.lastInternalLoginId;
    }
    this.allowUploading = other.allowUploading;
    this.showEmulatorLog = other.showEmulatorLog;
    this.basePort = other.basePort;
    this.secondaryPort = other.secondaryPort;
  }

  public ApplicationSettings deepCopy() {
    return new ApplicationSettings(this);
  }

  @Override
  public void clear() {
    this.id = "1";

    this.chatAudio = true;

    this.chatStatus = com.mamehub.thrift.ChatStatus.ONLINE;

    this.lastInternalLoginId = "";

    this.allowUploading = true;

    this.showEmulatorLog = false;

    this.basePort = 6805;

    this.secondaryPort = 6806;

  }

  public String getId() {
    return this.id;
  }

  public ApplicationSettings setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public boolean isChatAudio() {
    return this.chatAudio;
  }

  public ApplicationSettings setChatAudio(boolean chatAudio) {
    this.chatAudio = chatAudio;
    setChatAudioIsSet(true);
    return this;
  }

  public void unsetChatAudio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHATAUDIO_ISSET_ID);
  }

  /** Returns true if field chatAudio is set (has been assigned a value) and false otherwise */
  public boolean isSetChatAudio() {
    return EncodingUtils.testBit(__isset_bitfield, __CHATAUDIO_ISSET_ID);
  }

  public void setChatAudioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHATAUDIO_ISSET_ID, value);
  }

  /**
   * 
   * @see ChatStatus
   */
  public ChatStatus getChatStatus() {
    return this.chatStatus;
  }

  /**
   * 
   * @see ChatStatus
   */
  public ApplicationSettings setChatStatus(ChatStatus chatStatus) {
    this.chatStatus = chatStatus;
    return this;
  }

  public void unsetChatStatus() {
    this.chatStatus = null;
  }

  /** Returns true if field chatStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetChatStatus() {
    return this.chatStatus != null;
  }

  public void setChatStatusIsSet(boolean value) {
    if (!value) {
      this.chatStatus = null;
    }
  }

  public String getLastInternalLoginId() {
    return this.lastInternalLoginId;
  }

  public ApplicationSettings setLastInternalLoginId(String lastInternalLoginId) {
    this.lastInternalLoginId = lastInternalLoginId;
    return this;
  }

  public void unsetLastInternalLoginId() {
    this.lastInternalLoginId = null;
  }

  /** Returns true if field lastInternalLoginId is set (has been assigned a value) and false otherwise */
  public boolean isSetLastInternalLoginId() {
    return this.lastInternalLoginId != null;
  }

  public void setLastInternalLoginIdIsSet(boolean value) {
    if (!value) {
      this.lastInternalLoginId = null;
    }
  }

  public boolean isAllowUploading() {
    return this.allowUploading;
  }

  public ApplicationSettings setAllowUploading(boolean allowUploading) {
    this.allowUploading = allowUploading;
    setAllowUploadingIsSet(true);
    return this;
  }

  public void unsetAllowUploading() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWUPLOADING_ISSET_ID);
  }

  /** Returns true if field allowUploading is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowUploading() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWUPLOADING_ISSET_ID);
  }

  public void setAllowUploadingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWUPLOADING_ISSET_ID, value);
  }

  public boolean isShowEmulatorLog() {
    return this.showEmulatorLog;
  }

  public ApplicationSettings setShowEmulatorLog(boolean showEmulatorLog) {
    this.showEmulatorLog = showEmulatorLog;
    setShowEmulatorLogIsSet(true);
    return this;
  }

  public void unsetShowEmulatorLog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWEMULATORLOG_ISSET_ID);
  }

  /** Returns true if field showEmulatorLog is set (has been assigned a value) and false otherwise */
  public boolean isSetShowEmulatorLog() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWEMULATORLOG_ISSET_ID);
  }

  public void setShowEmulatorLogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWEMULATORLOG_ISSET_ID, value);
  }

  public int getBasePort() {
    return this.basePort;
  }

  public ApplicationSettings setBasePort(int basePort) {
    this.basePort = basePort;
    setBasePortIsSet(true);
    return this;
  }

  public void unsetBasePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEPORT_ISSET_ID);
  }

  /** Returns true if field basePort is set (has been assigned a value) and false otherwise */
  public boolean isSetBasePort() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEPORT_ISSET_ID);
  }

  public void setBasePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEPORT_ISSET_ID, value);
  }

  public int getSecondaryPort() {
    return this.secondaryPort;
  }

  public ApplicationSettings setSecondaryPort(int secondaryPort) {
    this.secondaryPort = secondaryPort;
    setSecondaryPortIsSet(true);
    return this;
  }

  public void unsetSecondaryPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID);
  }

  /** Returns true if field secondaryPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondaryPort() {
    return EncodingUtils.testBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID);
  }

  public void setSecondaryPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDARYPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CHAT_AUDIO:
      if (value == null) {
        unsetChatAudio();
      } else {
        setChatAudio((Boolean)value);
      }
      break;

    case CHAT_STATUS:
      if (value == null) {
        unsetChatStatus();
      } else {
        setChatStatus((ChatStatus)value);
      }
      break;

    case LAST_INTERNAL_LOGIN_ID:
      if (value == null) {
        unsetLastInternalLoginId();
      } else {
        setLastInternalLoginId((String)value);
      }
      break;

    case ALLOW_UPLOADING:
      if (value == null) {
        unsetAllowUploading();
      } else {
        setAllowUploading((Boolean)value);
      }
      break;

    case SHOW_EMULATOR_LOG:
      if (value == null) {
        unsetShowEmulatorLog();
      } else {
        setShowEmulatorLog((Boolean)value);
      }
      break;

    case BASE_PORT:
      if (value == null) {
        unsetBasePort();
      } else {
        setBasePort((Integer)value);
      }
      break;

    case SECONDARY_PORT:
      if (value == null) {
        unsetSecondaryPort();
      } else {
        setSecondaryPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CHAT_AUDIO:
      return Boolean.valueOf(isChatAudio());

    case CHAT_STATUS:
      return getChatStatus();

    case LAST_INTERNAL_LOGIN_ID:
      return getLastInternalLoginId();

    case ALLOW_UPLOADING:
      return Boolean.valueOf(isAllowUploading());

    case SHOW_EMULATOR_LOG:
      return Boolean.valueOf(isShowEmulatorLog());

    case BASE_PORT:
      return Integer.valueOf(getBasePort());

    case SECONDARY_PORT:
      return Integer.valueOf(getSecondaryPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CHAT_AUDIO:
      return isSetChatAudio();
    case CHAT_STATUS:
      return isSetChatStatus();
    case LAST_INTERNAL_LOGIN_ID:
      return isSetLastInternalLoginId();
    case ALLOW_UPLOADING:
      return isSetAllowUploading();
    case SHOW_EMULATOR_LOG:
      return isSetShowEmulatorLog();
    case BASE_PORT:
      return isSetBasePort();
    case SECONDARY_PORT:
      return isSetSecondaryPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationSettings)
      return this.equals((ApplicationSettings)that);
    return false;
  }

  public boolean equals(ApplicationSettings that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_chatAudio = true;
    boolean that_present_chatAudio = true;
    if (this_present_chatAudio || that_present_chatAudio) {
      if (!(this_present_chatAudio && that_present_chatAudio))
        return false;
      if (this.chatAudio != that.chatAudio)
        return false;
    }

    boolean this_present_chatStatus = true && this.isSetChatStatus();
    boolean that_present_chatStatus = true && that.isSetChatStatus();
    if (this_present_chatStatus || that_present_chatStatus) {
      if (!(this_present_chatStatus && that_present_chatStatus))
        return false;
      if (!this.chatStatus.equals(that.chatStatus))
        return false;
    }

    boolean this_present_lastInternalLoginId = true && this.isSetLastInternalLoginId();
    boolean that_present_lastInternalLoginId = true && that.isSetLastInternalLoginId();
    if (this_present_lastInternalLoginId || that_present_lastInternalLoginId) {
      if (!(this_present_lastInternalLoginId && that_present_lastInternalLoginId))
        return false;
      if (!this.lastInternalLoginId.equals(that.lastInternalLoginId))
        return false;
    }

    boolean this_present_allowUploading = true;
    boolean that_present_allowUploading = true;
    if (this_present_allowUploading || that_present_allowUploading) {
      if (!(this_present_allowUploading && that_present_allowUploading))
        return false;
      if (this.allowUploading != that.allowUploading)
        return false;
    }

    boolean this_present_showEmulatorLog = true;
    boolean that_present_showEmulatorLog = true;
    if (this_present_showEmulatorLog || that_present_showEmulatorLog) {
      if (!(this_present_showEmulatorLog && that_present_showEmulatorLog))
        return false;
      if (this.showEmulatorLog != that.showEmulatorLog)
        return false;
    }

    boolean this_present_basePort = true;
    boolean that_present_basePort = true;
    if (this_present_basePort || that_present_basePort) {
      if (!(this_present_basePort && that_present_basePort))
        return false;
      if (this.basePort != that.basePort)
        return false;
    }

    boolean this_present_secondaryPort = true;
    boolean that_present_secondaryPort = true;
    if (this_present_secondaryPort || that_present_secondaryPort) {
      if (!(this_present_secondaryPort && that_present_secondaryPort))
        return false;
      if (this.secondaryPort != that.secondaryPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ApplicationSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatAudio()).compareTo(other.isSetChatAudio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatAudio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatAudio, other.chatAudio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatStatus()).compareTo(other.isSetChatStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatStatus, other.chatStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastInternalLoginId()).compareTo(other.isSetLastInternalLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastInternalLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastInternalLoginId, other.lastInternalLoginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowUploading()).compareTo(other.isSetAllowUploading());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowUploading()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowUploading, other.allowUploading);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowEmulatorLog()).compareTo(other.isSetShowEmulatorLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowEmulatorLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showEmulatorLog, other.showEmulatorLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBasePort()).compareTo(other.isSetBasePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basePort, other.basePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondaryPort()).compareTo(other.isSetSecondaryPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondaryPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaryPort, other.secondaryPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplicationSettings(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatAudio:");
    sb.append(this.chatAudio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatStatus:");
    if (this.chatStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.chatStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastInternalLoginId:");
    if (this.lastInternalLoginId == null) {
      sb.append("null");
    } else {
      sb.append(this.lastInternalLoginId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowUploading:");
    sb.append(this.allowUploading);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showEmulatorLog:");
    sb.append(this.showEmulatorLog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("basePort:");
    sb.append(this.basePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondaryPort:");
    sb.append(this.secondaryPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationSettingsStandardSchemeFactory implements SchemeFactory {
    public ApplicationSettingsStandardScheme getScheme() {
      return new ApplicationSettingsStandardScheme();
    }
  }

  private static class ApplicationSettingsStandardScheme extends StandardScheme<ApplicationSettings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAT_AUDIO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.chatAudio = iprot.readBool();
              struct.setChatAudioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chatStatus = ChatStatus.findByValue(iprot.readI32());
              struct.setChatStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_INTERNAL_LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastInternalLoginId = iprot.readString();
              struct.setLastInternalLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALLOW_UPLOADING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowUploading = iprot.readBool();
              struct.setAllowUploadingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOW_EMULATOR_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showEmulatorLog = iprot.readBool();
              struct.setShowEmulatorLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BASE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.basePort = iprot.readI32();
              struct.setBasePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SECONDARY_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secondaryPort = iprot.readI32();
              struct.setSecondaryPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationSettings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHAT_AUDIO_FIELD_DESC);
      oprot.writeBool(struct.chatAudio);
      oprot.writeFieldEnd();
      if (struct.chatStatus != null) {
        oprot.writeFieldBegin(CHAT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.chatStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.lastInternalLoginId != null) {
        oprot.writeFieldBegin(LAST_INTERNAL_LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.lastInternalLoginId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALLOW_UPLOADING_FIELD_DESC);
      oprot.writeBool(struct.allowUploading);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_EMULATOR_LOG_FIELD_DESC);
      oprot.writeBool(struct.showEmulatorLog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_PORT_FIELD_DESC);
      oprot.writeI32(struct.basePort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECONDARY_PORT_FIELD_DESC);
      oprot.writeI32(struct.secondaryPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationSettingsTupleSchemeFactory implements SchemeFactory {
    public ApplicationSettingsTupleScheme getScheme() {
      return new ApplicationSettingsTupleScheme();
    }
  }

  private static class ApplicationSettingsTupleScheme extends TupleScheme<ApplicationSettings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetChatAudio()) {
        optionals.set(1);
      }
      if (struct.isSetChatStatus()) {
        optionals.set(2);
      }
      if (struct.isSetLastInternalLoginId()) {
        optionals.set(3);
      }
      if (struct.isSetAllowUploading()) {
        optionals.set(4);
      }
      if (struct.isSetShowEmulatorLog()) {
        optionals.set(5);
      }
      if (struct.isSetBasePort()) {
        optionals.set(6);
      }
      if (struct.isSetSecondaryPort()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetChatAudio()) {
        oprot.writeBool(struct.chatAudio);
      }
      if (struct.isSetChatStatus()) {
        oprot.writeI32(struct.chatStatus.getValue());
      }
      if (struct.isSetLastInternalLoginId()) {
        oprot.writeString(struct.lastInternalLoginId);
      }
      if (struct.isSetAllowUploading()) {
        oprot.writeBool(struct.allowUploading);
      }
      if (struct.isSetShowEmulatorLog()) {
        oprot.writeBool(struct.showEmulatorLog);
      }
      if (struct.isSetBasePort()) {
        oprot.writeI32(struct.basePort);
      }
      if (struct.isSetSecondaryPort()) {
        oprot.writeI32(struct.secondaryPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chatAudio = iprot.readBool();
        struct.setChatAudioIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chatStatus = ChatStatus.findByValue(iprot.readI32());
        struct.setChatStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastInternalLoginId = iprot.readString();
        struct.setLastInternalLoginIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allowUploading = iprot.readBool();
        struct.setAllowUploadingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.showEmulatorLog = iprot.readBool();
        struct.setShowEmulatorLogIsSet(true);
      }
      if (incoming.get(6)) {
        struct.basePort = iprot.readI32();
        struct.setBasePortIsSet(true);
      }
      if (incoming.get(7)) {
        struct.secondaryPort = iprot.readI32();
        struct.setSecondaryPortIsSet(true);
      }
    }
  }

}

